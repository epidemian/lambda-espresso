- Add Eta-reduction option.
- Add option to expand all definitions at the beginning.
- Add step-by-step reduction tests.
- Implement "call by need" strategy (lazy)
- Improve index.html
  - Save options and code in localStorage.
  - Use some binding library like Knockout.js to keep the DOM on-sync more easily :)
- Add examples to tests
- Add more examples:
  - Lists (or ranges)
  - Prime number generator? (IDK if division is implementable though...)
  - FizzBuzz http://experthuman.com/programming-with-nothing (or a subset of it)
- Add options to generated links.
- Eagerly reduce macros' definitions (or not...)
- Do not expand/collapse reductions just by clicking; it's annoying if you try to select some text.
- Use trampolining (or something similar) to avoid "too much recursion" errors
- Add "about" page/dialog with a brief description of what this is and how it was done.
- Improve input/output UX. Maybe have everything on the same panel and interleave reduction output between the input terms. See/copy: MathCAD, Matemathica
- Have better implementations for hairy things like:
  - terms highlighting
  - marking reduction steps
  (^ basically, anything that extends the core term objects, and changes their shape/type)
  - substitute and renameForSubstitution/applySubstitution distinction. Ideally there should only be one substitute function.
  - before/after step recording.
- Use DOM API for creating elements instead of innerHTML, to avoid possible and funny JS injections.
  - Or maybe use insertAdjacentHTML()


- Add references to nice intro material to Lambda Calculus:
  - [http://codon.com/programming-with-nothing](http://codon.com/programming-with-nothing)
  - [Ruby Conf 12 - Y Not- Adventures in Functional Programming by Jim Weirich](https://www.youtube.com/watch?v=FITJMJjASUs)
  - Lambda Calculus page on Wikipedia
