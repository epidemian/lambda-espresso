{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/browser-resolve/empty.js","node_modules/browserify/node_modules/process/browser.js","src/examples.coffee","src/grammar.js","src/helpers.coffee","src/index.coffee","src/lambda.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","process","queue","draining","currentQueue","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","setTimeout","len","run","clearTimeout","nextTick","fun","args","Array","arguments","push","Item","array","this","prototype","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","parser","k","v","$V0","$V1","$V2","$V3","$V4","$V5","$V6","trace","yy","symbols_","error","root","program","EOF","line","SEPARATOR","term","macro","=","LAMBDA","var",".","(",")","MACRO","VAR","$accept","$end","terminals_",2,5,7,10,11,13,14,15,16,17,"productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","getProgram","$","parseTermEvaluation","parseMacroDefinition","parseAbstraction","parseApplication","parseVariable","parseMacroUsage","table",3,4,6,8,9,12,"defaultActions","parseError","str","hash","recoverable","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","slice","lexer","Object","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","popStack","_token_stack","lex","token","symbol","preErrorSymbol","state","action","yyval","p","newState","expected","errStr","showPosition","join","text","match","loc","first_line","last_line","first_column","last_column","range","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","INITIAL","inclusive","Parser","main","commonjsMain","console","log","exit","source","readFileSync","normalize","repeatStr","res","extend","obj","src","srcs","timed","fn","time","timeEnd","compose","g","x","identity","example","examples","examplesDropdown","examplesHtml","examplesMenu","getOptions","lambda","output","reductions","renderArrow","renderArrowByType","renderCollapsedReduction","renderCollapsedReductionForm","renderExpandedReductionForm","renderReductions","renderStepOptions","renderSynonyms","renderTerm","updateInputFromHash","document","querySelector","bind","Node","addEventListener","delegate","eventType","selector","handler","event","element","results","target","parentNode","onceListener","removeEventListener","indexOf","childNodes","keyCode","ctrlKey","end","start","value","selectionStart","selectionEnd","className","label","type","synonyms","maxSteps","strategy","parseInt","err","reduceProgram","textContent","message","classList","toggle","html","map","innerHTML","collapsed","expanded","reduction","totalSteps","add","ref","remove","arrow","arrowAndFinal","final","initial","finalSynonyms","after","before","lastStep","step","steps","j","renderStep","highlightStep","highlightFormerTerm","highlightSubstitutionTerm","focus","preventDefault","contains","stopPropagation","location","codeStart","decodeURI","window","Abstraction","Application","Macro","Variable","alphaEq","applySubstitution","composeAbs","composeAppL","composeAppR","defaultOptions","expandStep","find","findSynonyms","freeIn","highlight","highlightAbstractionVar","markStep","parseTerm","reduceApplicative","reduceCallByName","reduceCallByValue","reduceFunctions","reduceNormal","reduceTerm","renameForSubstitution","renameVar","substitute","termStr","termTreeStr","varRenameCollides","varName","body","left","right","macros","terms","appParens","absParens","highlightVar","indentLines","makeLines","first","ht","hx","b","cb","subst","applied","renameCb","renamed","renamedBody","newVarName","oldName","base","isValid","m","newName","collisionHere","from","to","ha","highlightFormer","highlightSubst","hs","stepTerm","subT","t1","t2","normal","applicative","cbn","cbv","enough","reduce","ref1","terminates","expr"],"mappings":"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","file":"generated.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = [\n  name: 'Basics'\n  code: '''\n    ; This example is not intend to be a tutorial nor an introduction to λ Calculus.\n    ; You should check http://en.wikipedia.org/wiki/Lambda_calculus for that :)\n    ; As you can see, these are comments. You can run this example clicking the Run\n    ; button below or pressing Ctrl+Enter.\n    ; So, the three basic types of λ expressions are variables:\n    x\n    ; Applications:\n    x y\n    ; And abstractions (also known as functions):\n    λx.x\n    ; If the left side of an application is an abstraction, then a reduction takes place:\n    (λx.x) y\n    ; That little abstraction at the left is the identity, a very simple function that\n    ; just reduces to whatever you apply to it. We can give it a name (in ALLCAPS) like so:\n    ID = λx.x\n    ; And then just refer it by that name:\n    ID a\n    ; You can apply any kind of λ expression to an abstraction, like another function:\n    ID λb.c\n    ; Or an application:\n    ID (x y)\n    ; Or even the identity function itself:\n    ID ID\n    ; That means you can apply identity to itself as many times as you want and it'll still\n    ; be identity:\n    ID ID ID ID ID\n    ; Notice that applications are left-associative, so the line above is equivalent to:\n    ((((ID ID) ID) ID) ID)\n\n    ; TODO: explain applicative and normal order...\n  '''\n,\n  name: 'Booleans'\n  code: '''\n    ; Church booleans\n\n    ; The booleans and their operations can be encoded as the following λ-terms:\n    TRUE = λt.λf.t\n    FALSE = λt.λf.f\n    NOT = λp.p FALSE TRUE\n    AND = λp.λq.p q p\n    OR = λp.λq.p p q\n    IF = λp.p\n\n    ; Print truth tables for NOT, AND and OR:\n    NOT TRUE\n    NOT FALSE\n    AND FALSE FALSE\n    AND FALSE TRUE\n    AND TRUE FALSE\n    AND TRUE TRUE\n    OR FALSE FALSE\n    OR FALSE TRUE\n    OR TRUE FALSE\n    OR TRUE TRUE\n\n    ; Terms can be nested as much as we want:\n    IF (NOT NOT FALSE) (OR FALSE (IF TRUE TRUE FALSE)) FALSE\n\n    ; There's nothing special about \"operators\", we can treat them as any other value:\n    (IF FALSE OR AND) TRUE FALSE\n  '''\n,\n  name: 'Numbers'\n  code: '''\n    ; Church numerals\n\n    ; The first few numbers are:\n    ZERO = λs.λz.z\n    ONE = λs.λz.s z\n    TWO = λs.λz.s (s z)\n    THREE = λs.λz.s (s (s z))\n    ; In general, any natural number n can be encoded as:\n    ; N = λs.λz.s (s (s ... (s (s z)) ... ))\n    ; with s applied n times.\n\n    ; When we get tired of writing numbers like that, we can define a successor function:\n    SUCC = λn.λs.λz.s (n s z)\n    SUCC THREE\n\n    ; We can think of Church numerals as functions that apply a given function s to a\n    ; given value z a number of times. Zero will apply it 0 times (i.e. it'll give\n    ; us z back untouched) and three will call it 3 times.\n    ; So, we can represent the addition of numbers m and n as first applying n times s to z,\n    ; and then applying m times s to that:\n    ADD = λm.λn.λs.λz.m s (n s z)\n    ADD TWO THREE\n    ; ...or, more succinctly, as applying n times the successor function on m (or vice versa):\n    ADD' = λm.λn.n SUCC m\n    ADD' TWO THREE\n    ; Conversely, we could define the successor function as adding one:\n    SUCC' = ADD ONE\n    SUCC' THREE\n\n    ; Multiplication of m by n is applying m times a function that applies s n times:\n    MULT = λm.λn.λs.m (n s)\n    MULT THREE THREE\n    ; ...or applying m times the addition of n to zero:\n    MULT' = λm.λn.m (ADD n) ZERO\n    MULT' THREE THREE\n\n    ; Exponentiation n^m has a simple encoding: applying the base m to the exponent n,\n    ; which can be understood as applying m successively n times:\n    EXP = λm.λn.n m\n    EXP TWO THREE\n    ; ...or, alternatively, applying m times the multiplication by n to one:\n    EXP' = λm.λn.m (MULT n) ONE\n    EXP' TWO THREE\n\n    ; The encoding for the predecessor function is quite complex.\n    ; The Wikipedia article on Church encoding has a good explanation for this term ;-)\n    PRED = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    PRED THREE\n\n    ; But given the predecessor function is then easy to define the subtraction:\n    SUB = λm.λn.n PRED m\n    SUB THREE TWO\n\n    ; To build some predicate functions, we'll use some known boolean terms:\n    TRUE = λt.λf.t\n    FALSE = λt.λf.f\n    AND = λp.λq.p q p\n\n    ; To know if a number n is zero we can pass true as the base value and a function\n    ; that always returns false:\n    ISZERO = λn.n (λx.FALSE) TRUE\n    ISZERO ZERO\n    ISZERO TWO\n\n    ; Given the \"= 0\" predicate, numeric equality between m and n can be defined as\n    ; m - n = 0 and n - m = 0\n    EQ = λm.λn.AND (ISZERO (SUB m n)) (ISZERO (SUB n m))\n\n    ; Throw everyting into the mix:\n    EQ (EXP TWO THREE) (PRED (EXP THREE TWO))\n  '''\n  # TODO bump up the max-steps for this example (and try to use applicative order).\n,\n  name: 'Factorial'\n  code: '''\n    ; Recursion\n\n    ; Borrow some terms from previous examples:\n    TRUE = λt.λf.t\n    FALSE = λt.λf.f\n    IF = λp.p\n\n    ZERO = λs.λz.z\n    ONE = λs.λz.s z\n    TWO = λs.λz.s (s z)\n    THREE = λs.λz.s (s (s z))\n    FOUR = λs.λz.s (s (s (s z)))\n\n    PRED = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    MULT = λm.λn.λs.m (n s)\n    ISZERO = λn.n (λx.FALSE) TRUE\n\n    ; We'd like to be able to define a factorial function as:\n    ; FACT = λn.IF (ISZERO n) ONE (MULT n (FACT (PRED n)))\n    ; But we can't use a term in its own definition.\n    ; To achieve recursion, we can instead define a function that will receive itself\n    ; as a parameter r, and then recur by calling r with itself and n - 1:\n    FACT_REC = λr.λn.IF (ISZERO n) ONE (MULT n (r r (PRED n)))\n    ; The real factorial function would then be:\n    FACT = FACT_REC FACT_REC\n    FACT FOUR\n\n    ; Another way to recur is to use a general purpose fixed-point combinator.\n    ; The almighty Y Combinator:\n    Y = λf.(λx.f (x x)) (λx.f (x x))\n\n    ; And then there's no need to define a separate function:\n    FACT' = Y λr.λn.IF (ISZERO n) ONE (MULT n (r (PRED n)))\n    FACT' FOUR\n  '''\n]\n","/* parser generated by jison 0.4.15 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[2,11],$V6=[5,7,11,14,15,16,17];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"program\":4,\"EOF\":5,\"line\":6,\"SEPARATOR\":7,\"term\":8,\"macro\":9,\"=\":10,\"LAMBDA\":11,\"var\":12,\".\":13,\"(\":14,\")\":15,\"MACRO\":16,\"VAR\":17,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"SEPARATOR\",10:\"=\",11:\"LAMBDA\",13:\".\",14:\"(\",15:\")\",16:\"MACRO\",17:\"VAR\"},\nproductions_: [0,[3,2],[4,0],[4,1],[4,2],[4,3],[6,1],[6,3],[8,4],[8,2],[8,1],[8,1],[8,3],[9,1],[12,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return yy.getProgram(); \nbreak;\ncase 6:\n this.$ = yy.parseTermEvaluation($$[$0]); \nbreak;\ncase 7:\n this.$ = yy.parseMacroDefinition($$[$0-2], $$[$0]); \nbreak;\ncase 8:\n this.$ = yy.parseAbstraction($$[$0-2], $$[$0]); \nbreak;\ncase 9:\n this.$ = yy.parseApplication($$[$0-1], $$[$0]); \nbreak;\ncase 10:\n this.$ = yy.parseVariable($$[$0]); \nbreak;\ncase 11:\n this.$ = yy.parseMacroUsage($$[$0]); \nbreak;\ncase 12:\n this.$ = $$[$0-1]; \nbreak;\ncase 13: case 14:\n this.$ = yytext; \nbreak;\n}\n},\ntable: [o($V0,[2,2],{3:1,4:2,6:3,8:4,9:5,12:7,11:$V1,14:$V2,16:$V3,17:$V4}),{1:[3]},{5:[1,11],7:[1,12]},o($V0,[2,3]),o($V0,[2,6],{12:7,8:13,9:14,11:$V1,14:$V2,16:$V3,17:$V4}),o([5,7,11,14,16,17],$V5,{10:[1,15]}),{12:16,17:$V4},o($V6,[2,10]),{8:17,9:14,11:$V1,12:7,14:$V2,16:$V3,17:$V4},o([5,7,10,11,14,15,16,17],[2,13]),o([5,7,11,13,14,15,16,17],[2,14]),{1:[2,1]},o($V0,[2,4],{8:4,9:5,12:7,6:18,11:$V1,14:$V2,16:$V3,17:$V4}),o($V6,[2,9],{12:7,8:13,9:14}),o($V6,$V5),{8:19,9:14,11:$V1,12:7,14:$V2,16:$V3,17:$V4},{13:[1,20]},{8:13,9:14,11:$V1,12:7,14:$V2,15:[1,21],16:$V3,17:$V4},o($V0,[2,5]),o($V0,[2,7],{12:7,8:13,9:14,11:$V1,14:$V2,16:$V3,17:$V4}),{8:22,9:14,11:$V1,12:7,14:$V2,16:$V3,17:$V4},o($V6,[2,12]),o([5,7,15],[2,8],{12:7,8:13,9:14,11:$V1,14:$V2,16:$V3,17:$V4})],\ndefaultActions: {11:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        function lex() {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0: return 14; \nbreak;\ncase 1: return 15; \nbreak;\ncase 2: return 11; \nbreak;\ncase 3: return 13; \nbreak;\ncase 4: return 10; \nbreak;\ncase 5: return 17; \nbreak;\ncase 6: return 16; \nbreak;\ncase 7: return 7; \nbreak;\ncase 8: /* ignore whitespace */ \nbreak;\ncase 9: /* ignore line comments */ \nbreak;\ncase 10: return 5; \nbreak;\n}\n},\nrules: [/^(?:\\()/,/^(?:\\))/,/^(?:\\\\|λ)/,/^(?:\\.)/,/^(?:=)/,/^(?:[a-z][a-z0-9-_]*)/,/^(?:[A-Z][A-Z0-9-_]*'*)/,/^(?:[\\n])/,/^(?:[ \\t]+)/,/^(?:;.*)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","exports.repeatStr = (str, n) ->\n  res = ''\n  res += str while n--\n  res\n\nexports.extend = (obj, srcs...) ->\n  for src in srcs\n    obj[k] = v for k, v of src\n  obj\n\nexports.timed = (name, fn) ->\n  (args...) ->\n    console.time name\n    res = fn args...\n    console.timeEnd name\n    res\n\nexports.compose = (f, g) -> (x) -> f g x\n\nexports.identity = (x) -> x","# Script for index.html\nlambda = require './lambda'\nexamples = require './examples'\n{timed} = require './helpers'\n\n# Recreate some of jQuery's interface.\n$ = document.querySelector.bind document\n\nNode.prototype.on = Node.prototype.addEventListener\n\n# Like jQuery.fn.on(type, selector, handler)\nNode.prototype.delegate = (eventType, selector, handler) ->\n  @on eventType, (event) ->\n    element = event.target\n    # Try to find matching element bubbling up from event target.\n    while element isnt @\n      if element.matches selector\n        handler.apply element, arguments\n        break\n      element = element.parentNode\n\n# Like jQuery.fn.one\nNode.prototype.once = (eventType, handler) ->\n  onceListener = ->\n    handler.apply @, arguments\n    @removeEventListener eventType, onceListener\n  @on eventType, onceListener\n\nNode.prototype.index = ->\n  Array.prototype.indexOf.call @parentNode.childNodes, @\n\ninput = $ '.input'\noutput = $ '.output'\n\n# Run code on ctrl+enter.\ndocument.on 'keyup', (e) ->\n  run() if e.keyCode is 13 and e.ctrlKey\n\ninput.on 'keyup', (e) ->\n  # Replace every \"\\\" with \"λ\" while typing.\n  code = input.value\n  code = code.replace /\\\\/g, 'λ'\n  # Preserve selection\n  start = input.selectionStart\n  end   = input.selectionEnd\n  input.value = code\n  input.selectionStart = start\n  input.selectionEnd   = end\n\n($ '.run').on 'click', -> run()\n\nrenderTerm = (term, className = '') ->\n  \"<span class='term #{className}'>#{term}</span>\"\n\nrenderArrow = (symbol, label) ->\n  \"<span class=arrow>#{symbol}<small>#{label}</small></span>\"\n\nrenderArrowByType = (type) ->\n  symbol = if type is 'macro' then '≡' else '→'\n  label = switch type\n    when 'alpha' then 'α'\n    when 'beta' then 'β'\n    else ''\n  renderArrow symbol, label\n\nrenderSynonyms = (synonyms) ->\n  if synonyms.length\n    \"(#{synonyms.join ', '})\"\n  else\n    ''\n\ngetOptions = ->\n  maxSteps = parseInt ($ 'input[name=max-steps]').value or 0\n  strategy = ($ 'input[name=strategy]:checked').value\n  {maxSteps, strategy}\n\nreductions = null\nrun = ->\n  program = input.value\n  try\n    reductions = lambda.reduceProgram program, getOptions()\n    renderReductions()\n  catch err\n    output.textContent = err.message\n\n  output.classList.toggle 'error', err?\n\nrenderReductions = timed 'render html',  ->\n  html = (reductions.map renderCollapsedReduction).join ''\n  output.innerHTML = html\n\noutput.delegate 'click', '.reduction', ->\n  reduction = reductions[@index()]\n  return if reduction.totalSteps is 0\n  expanded = @querySelector '.expanded'\n  collapsed = @querySelector '.collapsed'\n  if expanded\n    expanded.classList.toggle 'hidden'\n    collapsed.classList.toggle 'hidden'\n  else\n    collapsed.classList.add 'hidden'\n    @innerHTML += renderExpandedReductionForm reduction\n\noutput.delegate 'mouseover', '.expanded .step', ->\n  @classList.add 'highlight'\n  # Hide the previous step's after term.\n  @previousElementSibling?.querySelector('.after').classList.add 'hidden'\n\noutput.delegate 'mouseout', '.expanded .step', ->\n  @classList.remove 'highlight'\n  @previousElementSibling?.querySelector('.after').classList.remove 'hidden'\n\nrenderCollapsedReduction = (reduction) ->\n  \"<div class=reduction>#{renderCollapsedReductionForm reduction}</div>\"\n\nrenderCollapsedReductionForm = (reduction) ->\n  initial = renderTerm reduction.initial\n  arrowAndFinal = if reduction.totalSteps > 0\n    arrow = renderArrow '→', \"(#{reduction.totalSteps})\"\n    final = renderTerm reduction.final\n    \"#{arrow} #{final}\"\n  else\n    ''\n  synonyms = renderSynonyms reduction.finalSynonyms\n  \"<div class=collapsed>#{initial} #{arrowAndFinal} #{synonyms}</div>\"\n\nrenderExpandedReductionForm = (reduction) ->\n  steps = for i in [0...reduction.totalSteps]\n    step = reduction.renderStep i, renderStepOptions\n    before = renderTerm step.before, 'before'\n    after = renderTerm step.after, 'after'\n    arrow = renderArrowByType step.type\n    lastStep = i is reduction.totalSteps - 1\n    synonyms = if lastStep then renderSynonyms reduction.finalSynonyms else ''\n    \"<span class=step>#{before}<br>#{arrow} #{after} #{synonyms}</span>\"\n\n  \"<div class=expanded>#{steps.join ''}</div>\"\n\nrenderStepOptions =\n  highlightStep: (str) ->\n    \"<span class=match>#{str}</span>\"\n  highlightFormerTerm: (str) ->\n    \"<span class=former-term>#{str}</span>\"\n  highlightSubstitutionTerm: (str) ->\n    \"<span class=subst-term>#{str}</span>\"\n\n\ninput.value = \"\"\"\n  ; Write some λ-expressions here and hit Run. Use \"\\\\\" to enter \"λ\" ;)\n  (λx.λy.λz.z y x) a b c\n\"\"\"\ninput.focus()\n\nexamplesMenu = $ '.examples-menu'\nexamplesHtml = for example, i in examples\n  hash = \">#{example.code}\".replace /\\n/g, '%0A'\n  \"<li><a href='##{hash}'>#{i} - #{example.name}</a></li>\"\nexamplesMenu.innerHTML = examplesHtml.join ''\nexamplesMenu.delegate 'click', 'li', (e) ->\n  e.preventDefault() # Don't change the location.hash\n  input.value = examples[@index()].code\n\nexamplesDropdown = $ '.examples-dropdown'\nexamplesDropdown.on 'click', (e) ->\n  return if examplesDropdown.classList.contains 'active'\n  e.stopPropagation()\n  examplesDropdown.classList.add 'active'\n  document.once 'click', ->\n    examplesDropdown.classList.remove 'active'\n\n($ 'button.link').on 'click', ->\n  code = input.value\n  location.hash = \">#{code}\"\n\nupdateInputFromHash = ->\n  hash = decodeURI location.hash\n  codeStart = hash.indexOf '>'\n  if codeStart isnt -1\n    code = hash.slice codeStart + 1\n    input.value = code\n\nwindow.addEventListener 'hashchange', updateInputFromHash\nupdateInputFromHash()\n","# λ calculus parser\n{repeatStr, extend, timed, compose, identity} = require './helpers'\n\n# Term types/constructors.\nVariable    = (name)          -> {type: Variable, name}\nAbstraction = (varName, body) -> {type: Abstraction, varName, body}\nApplication = (left, right)   -> {type: Application, left, right}\nMacro       = (name, term)    -> {type: Macro, name, term}\n\n# Parses an input program string and returns an array of terms to be reduced.\nparse = timed 'parse', (str) ->\n  # A custom Jison parser.\n  parser = new (require './grammar').Parser\n\n  # A macro table with the macros by their names.\n  macros = {}\n  # The terms of the program.\n  terms = []\n\n  # Add some handy functions so the parser can build the AST.\n  parser.yy =\n    parseAbstraction: Abstraction\n    parseApplication: Application\n    parseVariable: Variable\n    parseMacroDefinition: (name, term) ->\n      throw Error \"#{name} already defined\" if macros[name]\n      macros[name] = Macro name, term\n    parseMacroUsage: (name) ->\n      throw Error \"#{name} not defined\" unless macros[name]\n      macros[name]\n    parseTermEvaluation: (term) -> terms.push term\n    getProgram: -> {macros, terms}\n\n  parser.parse str\n\n# Returns the string representation for a given term t.\ntermStr = (t, appParens = no, absParens = no) ->\n  str = switch t.type\n    when Variable, Macro\n      t.name\n    when Abstraction\n      lambda = \"λ#{t.varName}\"\n      lambda = t.highlightVar lambda if t.highlightVar\n      str = \"#{lambda}.#{termStr t.body}\"\n      if absParens then \"(#{str})\" else str\n    when Application\n      str = \"#{termStr t.left, no, yes} #{termStr t.right, yes, absParens}\"\n      if appParens then \"(#{str})\" else str\n  if t.highlight\n    str = t.highlight str\n  str\n\n# Show a term in a tree format. Useful for debugging.\ntermTreeStr = do ->\n  makeLines = (t) ->\n    switch t.type\n      when Variable, Macro\n        [t.name]\n      when Abstraction\n        [\"λ#{t.varName}\", (indentLines (makeLines t.body), '╰─', '  ')...]\n      when Application\n        [\"@\", (indentLines (makeLines t.left),  '├─', '│ ')...\n              (indentLines (makeLines t.right), '╰─', '  ')...]\n\n  indentLines = (lines, first, next) ->\n    \"#{if n is 0 then first else next}#{line}\" for line, n in lines\n\n  (t) ->\n    (makeLines t).join '\\n'\n\nhighlight = (t, fn) ->\n  if t.highlight\n    fn = compose fn, t.highlight\n  extend {}, t, highlight: fn\n\nhighlightAbstractionVar = (t, x, fn) ->\n  hx = highlight (Variable x), fn\n  ht = substitute t, x, hx\n  extend (Abstraction x, ht), highlightVar: fn\n\ncomposeAbs = (fn, x) -> (b) -> fn Abstraction x, b\ncomposeAppL = (fn, l) -> (r) -> fn Application l, r\ncomposeAppR = (fn, r) -> (l) -> fn Application l, r\n\nreduceCallByName = (t, cb) ->\n  switch t.type\n    when Variable, Abstraction\n      t\n    when Application\n      l = reduceCallByName t.left, (composeAppR cb, t.right)\n      if l.type is Abstraction\n        reduceCallByName (apply l, t.right, cb), cb\n      else\n        # TODO This is suspicious. If some reductions were made in previous\n        # l = reduceCallByName ... call, then we are losing the result of those\n        # reductions, but we have recorded them with cb.\n        Application l, t.right\n    when Macro\n      cb markStep 'macro', t, t.term\n      reduceCallByName t.term, cb\n\nreduceNormal = (t, cb) ->\n  switch t.type\n    when Variable\n      t\n    when Abstraction\n      Abstraction t.varName, (reduceNormal t.body, (composeAbs cb, t.varName))\n    when Application\n      l = reduceCallByName t.left, (composeAppR cb, t.right)\n      if l.type is Abstraction\n        reduceNormal (apply l, t.right, cb), cb\n      else\n        l = reduceNormal l, (composeAppR cb, t.right) # Finish reducing l.\n        r = reduceNormal t.right, (composeAppL cb, l)\n        Application l, r\n    when Macro\n      cb markStep 'macro', t, t.term\n      reduceNormal t.term, cb\n\nreduceCallByValue = (t, cb) ->\n  switch t.type\n    when Variable, Abstraction\n      t\n    when Application\n      l = reduceCallByValue t.left, (composeAppR cb, t.right)\n      r = reduceCallByValue t.right, (composeAppL cb, l)\n      if l.type is Abstraction\n        reduceCallByValue (apply l, r, cb), cb\n      else\n        Application l, r\n    when Macro\n      cb markStep 'macro', t, t.term\n      reduceCallByName t.term, cb\n\nreduceApplicative = (t, cb) ->\n  switch t.type\n    when Variable\n      t\n    when Abstraction\n      Abstraction t.varName, (reduceApplicative t.body, (composeAbs cb, t.varName))\n    when Application\n      l = reduceCallByValue t.left, (composeAppR cb, t.right)\n      if l.type is Abstraction\n        r = reduceCallByValue t.right, (composeAppL cb, l)\n        reduceApplicative (apply l, r, cb), cb\n      else\n        l = reduceApplicative l, (composeAppR cb, t.right)\n        r = reduceApplicative t.right, (composeAppL cb, l)\n        Application l, r\n    when Macro\n      cb markStep 'macro', t, t.term\n      reduceApplicative t.term, cb\n\napply = (abs, subst, cb) ->\n  renameCb = composeAbs (composeAppR cb, subst), abs.varName\n  renamedBody = renameForSubstitution abs.body, abs.varName, subst, renameCb\n  renamed = Application (Abstraction abs.varName, renamedBody), subst\n  applied = applySubstitution renamedBody, abs.varName, subst\n  cb markStep 'beta', renamed, applied\n  applied\n\n# Applies the substitution T[x := S]\n# I.e., substitutes the variable x for the term S in the term T.\nsubstitute = (t, x, s) ->\n  switch t.type\n    when Variable\n      # x[x := S] = S\n      # y[x := S] = y\n      if t.name is x then s else t\n    when Abstraction\n      # (λx.E)[x := S] = λx.E\n      # λx creates a new context for x so no further substitution is needed.\n      return t if t.varName is x\n      # (λy.E)[x := S] with x != y\n      # If y is free in S and x is free in E, then must α-convert λy.E to avoid\n      # name conflicts.\n      if (freeIn t.varName, s) and (freeIn x, t.body)\n        # (λy.E)[x := S] = λy'.(E[y := y'][x := S])\n        newVarName = renameVar t.varName, t.body, s\n        renamedBody = applySubstitution t.body, t.varName, Variable newVarName\n        Abstraction newVarName, (substitute renamedBody, x, s)\n      else\n        # (λy.E)[x := S] = λy.(E[x := S])\n        Abstraction t.varName, (substitute t.body, x, s)\n    when Application\n      # (U V)[x := S] = (U[x := S]) (V[x := S])\n      Application (substitute t.left, x, s), (substitute t.right, x, s)\n    when Macro\n      if freeIn x, t.term\n        # TODO delete. Check for free variables on macros when (or after) parsing.\n        throw Error \"Logical error: #{x} is free in #{t.name}.\" +\n          \"Macros cannot have free variables\"\n      t\n\n# Performs the α-conversions necessary for the substitution T[x := S], but does\n# not perform the substitution itself.\n# Records the α-conversions by calling cb.\nrenameForSubstitution = (t, x, s, cb) ->\n  switch t.type\n    when Variable, Macro\n      t\n    when Abstraction\n      return t if t.varName is x\n      if (freeIn t.varName, s) and (freeIn x, t.body)\n        newVarName = renameVar t.varName, t.body, s\n        renamedBody = applySubstitution t.body, t.varName, Variable newVarName\n        cb markStep 'alpha', t, (t = Abstraction newVarName, renamedBody)\n      Abstraction t.varName, (renameForSubstitution t.body, x, s, (composeAbs cb, t.varName))\n    when Application\n      l = renameForSubstitution t.left, x, s, (composeAppR cb, t.right)\n      r = renameForSubstitution t.right, x, s, (composeAppL cb, l)\n      Application l, r\n\n# Applies the substitution T[x := S] directly, without performing α-conversions.\napplySubstitution = (t, x, s) ->\n  switch t.type\n    when Variable\n      if t.name is x then s else t\n    when Abstraction\n      if t.varName is x\n        t\n      else\n        Abstraction t.varName, (applySubstitution t.body, x, s)\n    when Application\n      Application (applySubstitution t.left, x, s), (applySubstitution t.right, x, s)\n    when Macro\n      if freeIn x, t.term\n        throw Error \"Logical error: #{x} is free in #{t.name}.\" +\n        \"Macros cannot have free variables\"\n      t\n\n# Renames a variable to avoid naming conflicts when doing a substitution.\nrenameVar = (oldName, t, s) ->\n  # Split the name into base and number part.\n  base = oldName.replace /\\d+$/, ''\n  n = if m = oldName.match /\\d+$/ then parseInt m[0] else 0\n\n  loop\n    newName = base + ++n\n    isValid =\n      # Avoid name collisions with substitution term.\n      not (freeIn newName, s) and\n      # Avoid name collisions with free variables in body.\n      not (freeIn newName, t) and\n      # Avoid name collisions with inner abstractions.\n      not (varRenameCollides t, oldName, newName)\n    return newName if isValid\n\n# Whether the variable x is free in the term t.\nfreeIn = (x, t) ->\n  switch t.type\n    when Variable\n      t.name is x\n    when Abstraction\n      t.varName isnt x and freeIn x, t.body\n    when Application\n      (freeIn x, t.left) or (freeIn x, t.right)\n    when Macro\n      freeIn x, t.term\n\n# Whether a variable rename collides in a given term. That is, if changing the\n# occurrences of oldName with newName in t would make it change t's meaning\n# (i.e. not be α-equivalent).\nvarRenameCollides = (t, oldName, newName) ->\n  switch t.type\n    when Variable\n      no\n    when Abstraction\n      # A variable rename collides with this abstraction if the old variable\n      # was free in the abstraction and the new name for the variable is the\n      # same as the varName of the abstraction, thus changing old free variable\n      # binding.\n      collisionHere = t.varName is newName and (freeIn oldName, t)\n      # Or if the renaming collides in the body of the abstraction...\n      collisionHere or varRenameCollides t.body, oldName, newName\n    when Application\n      (varRenameCollides t.left, oldName, newName) or\n      (varRenameCollides t.right, oldName, newName)\n    when Macro\n      varRenameCollides t.term, oldName, newName\n\nmarkStep = (type, before, after) ->\n  extend {}, after, step: {type, before}\n\nfind = (t, fn) ->\n  return t if fn t\n  switch t.type\n    when Variable, Macro\n      null\n    when Abstraction\n      find t.body, fn\n    when Application\n      (find t.left, fn) or (find t.right, fn)\n\nreplace = (t, from, to) ->\n  return to if t is from\n  switch t.type\n    when Variable, Macro\n      t\n    when Abstraction\n      body = replace t.body, from, to\n      if t.body is body then t else Abstraction t.varName, body\n    when Application\n      l = replace t.left, from, to\n      if t.left is l\n        r = replace t.right, from, to\n        if t.right is r then t else Application l, r\n      else\n        Application l, t.right\n\nexpandStep = (t, options = {}) ->\n  stepTerm = find t, (subT) -> subT.step\n  type = stepTerm.step.type\n  before = stepTerm.step.before\n  after = stepTerm\n\n  highlightFormer = options.highlightFormerTerm or identity\n  highlightSubst = options.highlightSubstitutionTerm or identity\n  highlightStep = options.highlightStep or identity\n\n  switch type\n    when 'alpha'\n      before = highlightAbstractionVar before.body, before.varName, highlightFormer\n      after = highlightAbstractionVar after.body, after.varName, highlightSubst\n    when 'beta'\n      hs = highlight before.right, highlightSubst\n      ha = highlightAbstractionVar before.left.body, before.left.varName, highlightFormer\n      before = Application ha, hs\n      after = substitute before.left.body, before.left.varName, hs\n    when 'macro'\n      before = highlight before, highlightFormer\n      after = highlight after, highlightSubst\n\n  before = highlight before, highlightStep\n  after = highlight after, highlightStep\n\n  before = termStr replace t, stepTerm, before\n  after = termStr replace t, stepTerm, after\n\n  {type, before, after}\n\nalphaEq = (t1, t2) ->\n  return alphaEq t1.term, t2 if t1.type is Macro\n  return alphaEq t1, t2.term if t2.type is Macro\n  return no unless t1.type is t2.type\n  switch t1.type\n    when Variable\n      t1.name is t2.name\n    when Abstraction\n      if t1.varName is t2.varName\n        alphaEq t1.body, t2.body\n      else\n        alphaEq t1.body, (substitute t2.body, t2.varName, Variable(t1.varName))\n    when Application\n      (alphaEq t1.left, t2.left) and (alphaEq t1.right, t2.right)\n\nfindSynonyms = (term, macros) ->\n  name for name, macro of macros when alphaEq term, macro\n\ndefaultOptions =\n  maxSteps: 100\n  strategy: 'normal'\n\nreduceFunctions =\n  normal: reduceNormal\n  applicative: reduceApplicative\n  cbn: reduceCallByName\n  cbv: reduceCallByValue\n\n# Reduces a term up to its normal form and returns TODO What does it return?\nreduceTerm = timed 'reduce', (term, macros, options) ->\n  {maxSteps, strategy} = extend {}, defaultOptions, options\n  reduce = reduceFunctions[strategy]\n  enough = {}\n  steps = []\n  try\n    reduce term, (t) ->\n      throw enough if steps.length >= maxSteps\n      steps.push t\n    terminates = yes\n  catch e\n    throw e if e isnt enough\n    terminates = no\n\n  initial = term\n  final = steps[steps.length - 1] or term\n  finalSynonyms = findSynonyms final, macros\n  initial = termStr initial\n  final = termStr final\n  totalSteps = steps.length\n  renderStep = (i, options) ->\n    expandStep steps[i], options\n  {initial, final, finalSynonyms, terminates, totalSteps, renderStep}\n\nparseTerm = (str) ->\n  {terms} = parse str\n  throw Error \"program has #{terms.length} terms\" if terms.length isnt 1\n  terms[0]\n\nexports.termTreeStr = (str) ->\n  termTreeStr parseTerm str\n\n# Parse a program with only one term.\nexports.parseTerm = (str) ->\n  termStr parseTerm str\n\n# Reduce a program with only one term.\nexports.reduceTerm = (str, options = {}) ->\n  reduceTerm (parseTerm str), {}, options\n\n# Reduce a program that might have multiple terms.\nexports.reduceProgram = (expr, options = {}) ->\n  {terms, macros} = parse expr\n  reduceTerm term, macros, options for term in terms\n"]}