{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/browser-resolve/empty.js","node_modules/browserify/node_modules/process/browser.js","src/core.coffee","src/examples.coffee","src/grammar.js","src/helpers.coffee","src/index.coffee","src/lambda.coffee","src/parser.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","process","queue","draining","currentQueue","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","setTimeout","len","run","clearTimeout","nextTick","fun","args","Array","arguments","push","Item","array","this","prototype","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","App","Def","Fun","Var","type","param","body","left","right","term","grammar","k","v","$V0","$V1","$V2","$V3","$V4","$V5","parser","trace","yy","symbols_","error","root","program","EOF","line","SEPARATOR","ident","=","LAMBDA",".","(",")","IDENT","$accept","$end","terminals_",2,5,7,10,11,12,13,14,15,"productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","parseTopLevelTerm","parseDefinition","parseFunction","parseApplication","parseIdentifier","table",3,4,6,8,9,"defaultActions","parseError","str","hash","recoverable","_parseError","msg","message","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","slice","lexer","Object","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","popStack","_token_stack","lex","token","symbol","preErrorSymbol","state","action","yyval","p","newState","expected","errStr","showPosition","join","text","match","loc","first_line","last_line","first_column","last_column","range","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","INITIAL","inclusive","Parser","main","commonjsMain","console","log","exit","source","readFileSync","normalize","logTimings","extend","assign","obj","src","srcs","timed","fn","res","time","timeEnd","enableLogTimings","disableLogTimings","compose","g","x","identity","example","examples","examplesDropdown","examplesHtml","examplesMenu","getOptions","output","reduceProgram","reductions","ref","renderArrow","renderArrowByType","renderCollapsedReduction","renderCollapsedReductionForm","renderExpandedReductionForm","renderReductions","renderStepOptions","renderSynonyms","renderTerm","updateInputFromHash","document","querySelector","bind","Node","addEventListener","delegate","eventType","selector","handler","event","element","results","target","parentNode","onceListener","removeEventListener","indexOf","childNodes","keyCode","ctrlKey","end","start","value","selectionStart","selectionEnd","className","label","synonyms","maxSteps","strategy","parseInt","err","textContent","classList","toggle","html","map","innerHTML","collapsed","expanded","reduction","totalSteps","add","ref1","remove","arrow","arrowAndFinal","final","initial","finalSynonyms","after","before","lastStep","step","steps","j","renderStep","highlightStep","highlightFormerTerm","highlightSubstitutionTerm","focus","preventDefault","contains","stopPropagation","location","codeStart","decodeURI","window","alphaEq","applySubstitution","composeAppL","composeAppR","composeFun","defaultOptions","expandStep","find","findSynonyms","freeIn","highlight","highlightFunctionVar","markStep","reduceApplicative","reduceCallByName","reduceCallByValue","reduceFunctions","reduceNormal","reduceTerm","renameForSubstitution","renameVar","substitute","termStr","varRenameCollides","appParens","funParens","lambda","highlightVar","ht","hx","b","cb","subst","applied","renameCb","renamed","renamedBody","newVarName","oldName","base","isValid","m","newName","collisionHere","from","to","ha","highlightFormer","highlightSubst","hs","stepTerm","subT","t1","t2","defs","defTerm","normal","applicative","cbn","cbv","enough","reduce","ref2","terminates","terms","Ref","checkForCircularRefs","resolveDefRefs","resolveTermRefs","item","refNames","boundNames","free","defName","bound","refName","path","circularNote","nextRef"],"mappings":"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","file":"generated.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","# Term types/constructors.\nVar = (name) -> {type: Var, name}\nFun = (param, body) -> {type: Fun, param, body}\nApp = (left, right) -> {type: App, left, right}\nDef = (name, term) -> {type: Def, name, term}\n\nmodule.exports = {Var, Fun, App, Def}\n","module.exports = [\n  name: 'Basics'\n  code: '''\n    ; This example is not intend to be a tutorial nor an introduction to λ Calculus.\n    ; You should check http://en.wikipedia.org/wiki/Lambda_calculus for that :)\n    ; As you can see, these are comments. You can run this example clicking the Run\n    ; button below or pressing Ctrl+Enter.\n    ; So, the three basic types of λ expressions are:\n    ; Variables:\n    x\n    ; Applications:\n    x y\n    ; And lambda abstractions (also known as functions):\n    λx.x\n    ; If the left-side of an application is an abstraction, then a reduction takes place:\n    (λx.x) y\n    ; That little abstraction at the left is the identity, a very simple function that\n    ; just reduces to whatever you apply to it. We can give it a name like so:\n    id = λx.x\n    ; And then just refer it by that name:\n    id a\n    ; You can apply any kind of λ expression to an abstraction, like another function:\n    id λb.c\n    ; Or an application:\n    id (x y)\n    ; Or even the identity function itself:\n    id id\n    ; That means you can apply identity to itself as many times as you want and it'll still\n    ; be identity:\n    id id id id id\n    ; Notice that applications are left-associative, so the line above is equivalent to:\n    ((((id id) id) id) id)\n\n    ; TODO: explain applicative and normal order...\n  '''\n,\n  name: 'Booleans'\n  code: '''\n    ; Church booleans\n\n    ; The booleans and their operations can be encoded as the following λ-terms:\n    true = λt.λf.t\n    false = λt.λf.f\n    not = λp.p false true\n    and = λp.λq.p q p\n    or = λp.λq.p p q\n    if = λp.p\n\n    ; Print truth tables for not, and and or:\n    not true\n    not false\n    and false false\n    and false true\n    and true false\n    and true true\n    or false false\n    or false true\n    or true false\n    or true true\n\n    ; Terms can be nested as much as we want:\n    if (not not false) (or false (if true true false)) false\n\n    ; There's nothing special about \"operators\", we can treat them as any other value:\n    (if false or and) true false\n  '''\n,\n  name: 'Numbers'\n  code: '''\n    ; Church numerals\n\n    ; The first few numbers are:\n    zero = λs.λz.z\n    one = λs.λz.s z\n    two = λs.λz.s (s z)\n    three = λs.λz.s (s (s z))\n    ; In general, any natural number n can be encoded as:\n    ; N = λs.λz.s (s (s ... (s (s z)) ... ))\n    ; with s applied n times.\n\n    ; When we get tired of writing numbers like that, we can define a successor function:\n    succ = λn.λs.λz.s (n s z)\n    succ three\n\n    ; We can think of Church numerals as functions that apply a given function s to a\n    ; given value z a number of times. Zero will apply it 0 times (i.e. it'll give\n    ; us z back untouched) and three will call it 3 times.\n    ; So, we can represent the addition of numbers m and n as first applying n times s to z,\n    ; and then applying m times s to that:\n    add = λm.λn.λs.λz.m s (n s z)\n    add two three\n    ; ...or, more succinctly, as applying n times the successor function on m (or vice versa):\n    add' = λm.λn.n succ m\n    add' two three\n    ; Conversely, we could define the successor function as adding one:\n    succ' = add one\n    succ' three\n\n    ; Multiplication of m by n is applying m times a function that applies s n times:\n    mult = λm.λn.λs.m (n s)\n    mult three three\n    ; ...or applying m times the addition of n to zero:\n    mult' = λm.λn.m (add n) zero\n    mult' three three\n\n    ; Exponentiation n^m has a simple encoding: applying the base m to the exponent n,\n    ; which can be understood as applying m successively n times:\n    exp = λm.λn.n m\n    exp two three\n    ; ...or, alternatively, applying m times the multiplication by n to one:\n    exp' = λm.λn.m (mult n) one\n    exp' two three\n\n    ; The encoding for the predecessor function is quite complex.\n    ; The Wikipedia article on Church encoding has a good explanation for this term ;-)\n    pred = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    pred three\n\n    ; But given the predecessor function is then easy to define the subtraction:\n    sub = λm.λn.n pred m\n    sub three two\n\n    ; To build some predicate functions, we'll use some known boolean terms:\n    true = λt.λf.t\n    false = λt.λf.f\n    and = λp.λq.p q p\n\n    ; To know if a number n is zero we can pass true as the base value and a function\n    ; that always returns false:\n    zero? = λn.n (λx.false) true\n    zero? zero\n    zero? two\n\n    ; Given the \"= 0\" predicate, numeric equality between m and n can be defined as\n    ; m - n = 0 and n - m = 0\n    eq = λm.λn.and (zero? (sub m n)) (zero? (sub n m))\n\n    ; Throw everyting into the mix:\n    eq (exp two three) (pred (exp three two))\n  '''\n  # TODO bump up the max-steps for this example (and try to use applicative order).\n,\n  name: 'Factorial'\n  code: '''\n    ; Recursion\n\n    ; Borrow some terms from previous examples:\n    true = λt.λf.t\n    false = λt.λf.f\n    if = λp.p\n\n    zero = λs.λz.z\n    one = λs.λz.s z\n    two = λs.λz.s (s z)\n    three = λs.λz.s (s (s z))\n    four = λs.λz.s (s (s (s z)))\n\n    pred = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    mult = λm.λn.λs.m (n s)\n    zero? = λn.n (λx.false) true\n\n    ; We'd like to be able to define a factorial function as:\n    ; fact = λn.if (zero? n) one (mult n (fact (pred n)))\n    ; But we can't use a term in its own definition.\n    ; To achieve recursion, we can instead define a function that will receive itself\n    ; as a parameter r, and then recur by calling r with itself and n - 1:\n    fact-rec = λr.λn.if (zero? n) one (mult n (r r (pred n)))\n    ; The real factorial function would then be:\n    fact = fact-rec fact-rec\n    fact four\n\n    ; Another way to recur is to use a general purpose fixed-point combinator.\n    ; The almighty Y Combinator:\n    Y = λf.(λx.f (x x)) (λx.f (x x))\n\n    ; And then there's no need to define a separate function:\n    fact' = Y λr.λn.if (zero? n) one (mult n (r (pred n)))\n    fact' four\n  '''\n]\n","/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar grammar = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[2,10],$V5=[5,7,11,13,14,15];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"program\":4,\"EOF\":5,\"line\":6,\"SEPARATOR\":7,\"term\":8,\"ident\":9,\"=\":10,\"LAMBDA\":11,\".\":12,\"(\":13,\")\":14,\"IDENT\":15,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"SEPARATOR\",10:\"=\",11:\"LAMBDA\",12:\".\",13:\"(\",14:\")\",15:\"IDENT\"},\nproductions_: [0,[3,2],[4,0],[4,1],[4,2],[4,3],[6,1],[6,3],[8,4],[8,2],[8,1],[8,3],[9,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n /* do nothing; terms and definitions already collected */ \nbreak;\ncase 6:\n this.$ = yy.parseTopLevelTerm($$[$0]); \nbreak;\ncase 7:\n this.$ = yy.parseDefinition($$[$0-2], $$[$0]); \nbreak;\ncase 8:\n this.$ = yy.parseFunction($$[$0-2], $$[$0]); \nbreak;\ncase 9:\n this.$ = yy.parseApplication($$[$0-1], $$[$0]); \nbreak;\ncase 10:\n this.$ = yy.parseIdentifier($$[$0]); \nbreak;\ncase 11:\n this.$ = $$[$0-1]; \nbreak;\ncase 12:\n this.$ = yytext; \nbreak;\n}\n},\ntable: [o($V0,[2,2],{3:1,4:2,6:3,8:4,9:5,11:$V1,13:$V2,15:$V3}),{1:[3]},{5:[1,9],7:[1,10]},o($V0,[2,3]),o($V0,[2,6],{8:11,9:12,11:$V1,13:$V2,15:$V3}),o([5,7,11,13,15],$V4,{10:[1,13]}),{9:14,15:$V3},{8:15,9:12,11:$V1,13:$V2,15:$V3},o([5,7,10,11,12,13,14,15],[2,12]),{1:[2,1]},o($V0,[2,4],{8:4,9:5,6:16,11:$V1,13:$V2,15:$V3}),o($V5,[2,9],{8:11,9:12}),o($V5,$V4),{8:17,9:12,11:$V1,13:$V2,15:$V3},{12:[1,18]},{8:11,9:12,11:$V1,13:$V2,14:[1,19],15:$V3},o($V0,[2,5]),o($V0,[2,7],{8:11,9:12,11:$V1,13:$V2,15:$V3}),{8:20,9:12,11:$V1,13:$V2,15:$V3},o($V5,[2,11]),o([5,7,14],[2,8],{8:11,9:12,11:$V1,13:$V2,15:$V3})],\ndefaultActions: {9:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0: return 13; \nbreak;\ncase 1: return 14; \nbreak;\ncase 2: return 11; \nbreak;\ncase 3: return 12; \nbreak;\ncase 4: return 10; \nbreak;\ncase 5: return 7; \nbreak;\ncase 6: /* ignore whitespace */ \nbreak;\ncase 7: /* ignore line comments */ \nbreak;\ncase 8: return 15; \nbreak;\ncase 9: return 5; \nbreak;\n}\n},\nrules: [/^(?:\\()/,/^(?:\\))/,/^(?:\\\\|λ)/,/^(?:\\.)/,/^(?:=)/,/^(?:[\\n])/,/^(?:\\s+)/,/^(?:;.*)/,/^(?:[^\\s\\(\\)\\\\λ\\.=]+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = grammar;\nexports.Parser = grammar.Parser;\nexports.parse = function () { return grammar.parse.apply(grammar, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","exports.extend = Object.assign or (obj, srcs...) ->\n  for src in srcs\n    obj[k] = v for k, v of src\n  obj\n\nlogTimings = no\nexports.timed = (name, fn) ->\n  (args...) ->\n    console.time name if logTimings\n    res = fn args...\n    console.timeEnd name if logTimings\n    res\n\nexports.enableLogTimings = -> logTimings = yes\nexports.disableLogTimings = -> logTimings = no\n\nexports.compose = (f, g) -> (x) -> f g x\n\nexports.identity = (x) -> x\n","# Script for index.html\n{reduceProgram} = require './lambda'\nexamples = require './examples'\n{timed, enableLogTimings} = require './helpers'\n\nenableLogTimings()\n\n# Recreate some of jQuery's interface.\n$ = document.querySelector.bind document\n\nNode.prototype.on = Node.prototype.addEventListener\n\n# Like jQuery.fn.on(type, selector, handler)\nNode.prototype.delegate = (eventType, selector, handler) ->\n  @on eventType, (event) ->\n    element = event.target\n    # Try to find matching element bubbling up from event target.\n    while element isnt @\n      if element.matches selector\n        handler.apply element, arguments\n        break\n      element = element.parentNode\n\n# Like jQuery.fn.one\nNode.prototype.once = (eventType, handler) ->\n  onceListener = ->\n    handler.apply @, arguments\n    @removeEventListener eventType, onceListener\n  @on eventType, onceListener\n\nNode.prototype.index = ->\n  Array.prototype.indexOf.call @parentNode.childNodes, @\n\ninput = $ '.input'\noutput = $ '.output'\n\n# Run code on ctrl+enter.\ndocument.on 'keyup', (e) ->\n  run() if e.keyCode is 13 and e.ctrlKey\n\ninput.on 'keyup', (e) ->\n  # Replace every \"\\\" with \"λ\" while typing.\n  code = input.value\n  code = code.replace /\\\\/g, 'λ'\n  # Preserve selection\n  start = input.selectionStart\n  end   = input.selectionEnd\n  input.value = code\n  input.selectionStart = start\n  input.selectionEnd   = end\n\n($ '.run').on 'click', -> run()\n\nrenderTerm = (term, className = '') ->\n  \"<span class='term #{className}'>#{term}</span>\"\n\nrenderArrow = (symbol, label) ->\n  \"<span class=arrow>#{symbol}<small>#{label}</small></span>\"\n\nrenderArrowByType = (type) ->\n  symbol = if type is 'def' then '≡' else '→'\n  label = switch type\n    when 'alpha' then 'α'\n    when 'beta' then 'β'\n    else ''\n  renderArrow symbol, label\n\nrenderSynonyms = (synonyms) ->\n  if synonyms.length\n    \"<span class=synonyms>(#{synonyms.join ', '})</span>\"\n  else\n    ''\n\ngetOptions = ->\n  maxSteps = parseInt ($ 'input[name=max-steps]').value or 0\n  strategy = ($ 'input[name=strategy]:checked').value\n  {maxSteps, strategy}\n\nreductions = null\nrun = ->\n  program = input.value\n  try\n    reductions = reduceProgram program, getOptions()\n    renderReductions()\n  catch err\n    output.textContent = err.message\n\n  output.classList.toggle 'error', err?\n\nrenderReductions = timed 'render html',  ->\n  html = (reductions.map renderCollapsedReduction).join ''\n  output.innerHTML = html\n\noutput.delegate 'click', '.reduction', ->\n  reduction = reductions[@index()]\n  return if reduction.totalSteps is 0\n  expanded = @querySelector '.expanded'\n  collapsed = @querySelector '.collapsed'\n  if expanded\n    expanded.classList.toggle 'hidden'\n    collapsed.classList.toggle 'hidden'\n  else\n    collapsed.classList.add 'hidden'\n    @innerHTML += renderExpandedReductionForm reduction\n\noutput.delegate 'mouseover', '.expanded .step', ->\n  @classList.add 'highlight'\n  # Hide the previous step's after term.\n  @previousElementSibling?.querySelector('.after').classList.add 'hidden'\n\noutput.delegate 'mouseout', '.expanded .step', ->\n  @classList.remove 'highlight'\n  @previousElementSibling?.querySelector('.after').classList.remove 'hidden'\n\nrenderCollapsedReduction = (reduction) ->\n  \"<div class=reduction>#{renderCollapsedReductionForm reduction}</div>\"\n\nrenderCollapsedReductionForm = (reduction) ->\n  initial = renderTerm reduction.initial\n  arrowAndFinal = if reduction.totalSteps > 0\n    arrow = renderArrow '→', \"(#{reduction.totalSteps})\"\n    final = renderTerm reduction.final\n    \"#{arrow} #{final}\"\n  else\n    ''\n  synonyms = renderSynonyms reduction.finalSynonyms\n  \"<div class=collapsed>#{initial} #{arrowAndFinal} #{synonyms}</div>\"\n\nrenderExpandedReductionForm = (reduction) ->\n  steps = for i in [0...reduction.totalSteps]\n    step = reduction.renderStep i, renderStepOptions\n    before = renderTerm step.before, 'before'\n    after = renderTerm step.after, 'after'\n    arrow = renderArrowByType step.type\n    lastStep = i is reduction.totalSteps - 1\n    synonyms = if lastStep then renderSynonyms reduction.finalSynonyms else ''\n    \"<span class=step>#{before}<br>#{arrow} #{after} #{synonyms}</span>\"\n\n  \"<div class=expanded>#{steps.join ''}</div>\"\n\nrenderStepOptions =\n  highlightStep: (str) ->\n    \"<span class=match>#{str}</span>\"\n  highlightFormerTerm: (str) ->\n    \"<span class=former-term>#{str}</span>\"\n  highlightSubstitutionTerm: (str) ->\n    \"<span class=subst-term>#{str}</span>\"\n\n\ninput.value = \"\"\"\n  ; Write some λ-expressions here and hit Run. Use \"\\\\\" to enter \"λ\" ;)\n  (λx.λy.λz.z y x) a b c\n\"\"\"\ninput.focus()\n\nexamplesMenu = $ '.examples-menu'\nexamplesHtml = for example, i in examples\n  hash = \">#{example.code}\".replace /\\n/g, '%0A'\n  \"<li><a href='##{hash}'>#{i} - #{example.name}</a></li>\"\nexamplesMenu.innerHTML = examplesHtml.join ''\nexamplesMenu.delegate 'click', 'li', (e) ->\n  e.preventDefault() # Don't change the location.hash\n  input.value = examples[@index()].code\n\nexamplesDropdown = $ '.examples-dropdown'\nexamplesDropdown.on 'click', (e) ->\n  return if examplesDropdown.classList.contains 'active'\n  e.stopPropagation()\n  examplesDropdown.classList.add 'active'\n  document.once 'click', ->\n    examplesDropdown.classList.remove 'active'\n\n($ 'button.link').on 'click', ->\n  code = input.value\n  location.hash = \">#{code}\"\n\nupdateInputFromHash = ->\n  hash = decodeURI location.hash\n  codeStart = hash.indexOf '>'\n  if codeStart isnt -1\n    code = hash.slice codeStart + 1\n    input.value = code\n\nwindow.addEventListener 'hashchange', updateInputFromHash\nupdateInputFromHash()\n","{extend, timed, compose, identity} = require './helpers'\n{Var, Fun, App, Def} = require './core'\n{parse} = require './parser'\n\n# Returns the string representation for a given term t.\ntermStr = (t, appParens = no, funParens = no) ->\n  str = switch t.type\n    when Var, Def\n      t.name\n    when Fun\n      lambda = \"λ#{t.param}\"\n      lambda = t.highlightVar lambda if t.highlightVar\n      str = \"#{lambda}.#{termStr t.body}\"\n      if funParens then \"(#{str})\" else str\n    when App\n      str = \"#{termStr t.left, no, yes} #{termStr t.right, yes, funParens}\"\n      if appParens then \"(#{str})\" else str\n  if t.highlight\n    str = t.highlight str\n  str\n\nhighlight = (t, fn) ->\n  if t.highlight\n    fn = compose fn, t.highlight\n  extend {}, t, highlight: fn\n\nhighlightFunctionVar = (t, x, fn) ->\n  hx = highlight (Var x), fn\n  ht = substitute t, x, hx\n  extend (Fun x, ht), highlightVar: fn\n\ncomposeFun = (fn, x) -> (b) -> fn Fun x, b\ncomposeAppL = (fn, l) -> (r) -> fn App l, r\ncomposeAppR = (fn, r) -> (l) -> fn App l, r\n\nreduceCallByName = (t, cb) ->\n  switch t.type\n    when Var, Fun\n      t\n    when App\n      l = reduceCallByName t.left, (composeAppR cb, t.right)\n      if l.type is Fun\n        reduceCallByName (apply l, t.right, cb), cb\n      else\n        # TODO This is suspicious. If some reductions were made in previous\n        # l = reduceCallByName ... call, then we are losing the result of those\n        # reductions, but we have recorded them with cb.\n        App l, t.right\n    when Def\n      cb markStep 'def', t, t.term\n      reduceCallByName t.term, cb\n\nreduceNormal = (t, cb) ->\n  switch t.type\n    when Var\n      t\n    when Fun\n      Fun t.param, (reduceNormal t.body, (composeFun cb, t.param))\n    when App\n      l = reduceCallByName t.left, (composeAppR cb, t.right)\n      if l.type is Fun\n        reduceNormal (apply l, t.right, cb), cb\n      else\n        l = reduceNormal l, (composeAppR cb, t.right) # Finish reducing l.\n        r = reduceNormal t.right, (composeAppL cb, l)\n        App l, r\n    when Def\n      cb markStep 'def', t, t.term\n      reduceNormal t.term, cb\n\nreduceCallByValue = (t, cb) ->\n  switch t.type\n    when Var, Fun\n      t\n    when App\n      l = reduceCallByValue t.left, (composeAppR cb, t.right)\n      r = reduceCallByValue t.right, (composeAppL cb, l)\n      if l.type is Fun\n        reduceCallByValue (apply l, r, cb), cb\n      else\n        App l, r\n    when Def\n      cb markStep 'def', t, t.term\n      reduceCallByName t.term, cb\n\nreduceApplicative = (t, cb) ->\n  switch t.type\n    when Var\n      t\n    when Fun\n      Fun t.param, (reduceApplicative t.body, (composeFun cb, t.param))\n    when App\n      l = reduceCallByValue t.left, (composeAppR cb, t.right)\n      if l.type is Fun\n        r = reduceCallByValue t.right, (composeAppL cb, l)\n        reduceApplicative (apply l, r, cb), cb\n      else\n        l = reduceApplicative l, (composeAppR cb, t.right)\n        r = reduceApplicative t.right, (composeAppL cb, l)\n        App l, r\n    when Def\n      cb markStep 'def', t, t.term\n      reduceApplicative t.term, cb\n\napply = (fun, subst, cb) ->\n  renameCb = composeFun (composeAppR cb, subst), fun.param\n  renamedBody = renameForSubstitution fun.body, fun.param, subst, renameCb\n  renamed = App (Fun fun.param, renamedBody), subst\n  applied = applySubstitution renamedBody, fun.param, subst\n  cb markStep 'beta', renamed, applied\n  applied\n\n# Applies the substitution T[x := S]\n# I.e., substitutes the variable x for the term S in the term T.\nsubstitute = (t, x, s) ->\n  switch t.type\n    when Var\n      # x[x := S] = S\n      # y[x := S] = y\n      if t.name is x then s else t\n    when Fun\n      # (λx.E)[x := S] = λx.E\n      # λx creates a new context for x so no further substitution is needed.\n      return t if t.param is x\n      # (λy.E)[x := S] with x != y\n      # If y is free in S and x is free in E, then must α-convert λy.E to avoid\n      # name conflicts.\n      if (freeIn t.param, s) and (freeIn x, t.body)\n        # (λy.E)[x := S] = λy'.(E[y := y'][x := S])\n        newVarName = renameVar t.param, t.body, s\n        renamedBody = applySubstitution t.body, t.param, Var newVarName\n        Fun newVarName, (substitute renamedBody, x, s)\n      else\n        # (λy.E)[x := S] = λy.(E[x := S])\n        Fun t.param, (substitute t.body, x, s)\n    when App\n      # (U V)[x := S] = (U[x := S]) (V[x := S])\n      App (substitute t.left, x, s), (substitute t.right, x, s)\n    when Def\n      t\n\n# Performs the α-conversions necessary for the substitution T[x := S], but does\n# not perform the substitution itself.\n# Records the α-conversions by calling cb.\nrenameForSubstitution = (t, x, s, cb) ->\n  switch t.type\n    when Var, Def\n      t\n    when Fun\n      return t if t.param is x\n      if (freeIn t.param, s) and (freeIn x, t.body)\n        newVarName = renameVar t.param, t.body, s\n        renamedBody = applySubstitution t.body, t.param, Var newVarName\n        cb markStep 'alpha', t, (t = Fun newVarName, renamedBody)\n      Fun t.param, (renameForSubstitution t.body, x, s, (composeFun cb, t.param))\n    when App\n      l = renameForSubstitution t.left, x, s, (composeAppR cb, t.right)\n      r = renameForSubstitution t.right, x, s, (composeAppL cb, l)\n      App l, r\n\n# Applies the substitution T[x := S] directly, without performing α-conversions.\napplySubstitution = (t, x, s) ->\n  switch t.type\n    when Var\n      if t.name is x then s else t\n    when Fun\n      if t.param is x\n        t\n      else\n        Fun t.param, (applySubstitution t.body, x, s)\n    when App\n      App (applySubstitution t.left, x, s), (applySubstitution t.right, x, s)\n    when Def\n      t\n\n# Renames a variable to avoid naming conflicts when doing a substitution.\nrenameVar = (oldName, t, s) ->\n  # Split the name into base and number part.\n  base = oldName.replace /\\d+$/, ''\n  n = if m = oldName.match /\\d+$/ then parseInt m[0] else 0\n\n  loop\n    newName = base + ++n\n    isValid =\n      # Avoid name collisions with substitution term.\n      not (freeIn newName, s) and\n      # Avoid name collisions with free variables in body.\n      not (freeIn newName, t) and\n      # Avoid name collisions with inner functions.\n      not (varRenameCollides t, oldName, newName)\n    return newName if isValid\n\n# Whether the variable x is free in the term t.\nfreeIn = (x, t) ->\n  switch t.type\n    when Var\n      t.name is x\n    when Fun\n      t.param isnt x and freeIn x, t.body\n    when App\n      (freeIn x, t.left) or (freeIn x, t.right)\n    when Def\n      freeIn x, t.term\n\n# Whether a variable rename collides in a given term. That is, if changing the\n# occurrences of oldName with newName in t would make it change t's meaning\n# (i.e. not be α-equivalent).\nvarRenameCollides = (t, oldName, newName) ->\n  switch t.type\n    when Var\n      no\n    when Fun\n      # A variable rename collides with this function if the old variable\n      # was free in the function and the new name for the variable is the\n      # same as the param of the function, thus changing old free variable\n      # binding.\n      collisionHere = t.param is newName and (freeIn oldName, t)\n      # Or if the renaming collides in the body of the function...\n      collisionHere or varRenameCollides t.body, oldName, newName\n    when App\n      (varRenameCollides t.left, oldName, newName) or\n      (varRenameCollides t.right, oldName, newName)\n    when Def\n      varRenameCollides t.term, oldName, newName\n\nmarkStep = (type, before, after) ->\n  extend {}, after, step: {type, before}\n\nfind = (t, fn) ->\n  return t if fn t\n  switch t.type\n    when Var, Def\n      null\n    when Fun\n      find t.body, fn\n    when App\n      (find t.left, fn) or (find t.right, fn)\n\nreplace = (t, from, to) ->\n  return to if t is from\n  switch t.type\n    when Var, Def\n      t\n    when Fun\n      body = replace t.body, from, to\n      if t.body is body then t else Fun t.param, body\n    when App\n      l = replace t.left, from, to\n      if t.left is l\n        r = replace t.right, from, to\n        if t.right is r then t else App l, r\n      else\n        App l, t.right\n\nexpandStep = (t, options = {}) ->\n  stepTerm = find t, (subT) -> subT.step\n  type = stepTerm.step.type\n  before = stepTerm.step.before\n  after = stepTerm\n\n  highlightFormer = options.highlightFormerTerm or identity\n  highlightSubst = options.highlightSubstitutionTerm or identity\n  highlightStep = options.highlightStep or identity\n\n  switch type\n    when 'alpha'\n      before = highlightFunctionVar before.body, before.param, highlightFormer\n      after = highlightFunctionVar after.body, after.param, highlightSubst\n    when 'beta'\n      hs = highlight before.right, highlightSubst\n      ha = highlightFunctionVar before.left.body, before.left.param, highlightFormer\n      before = App ha, hs\n      after = substitute before.left.body, before.left.param, hs\n    when 'def'\n      before = highlight before, highlightFormer\n      after = highlight after, highlightSubst\n\n  before = highlight before, highlightStep\n  after = highlight after, highlightStep\n\n  before = termStr replace t, stepTerm, before\n  after = termStr replace t, stepTerm, after\n\n  {type, before, after}\n\nalphaEq = (t1, t2) ->\n  return alphaEq t1.term, t2 if t1.type is Def\n  return alphaEq t1, t2.term if t2.type is Def\n  return no unless t1.type is t2.type\n  switch t1.type\n    when Var\n      t1.name is t2.name\n    when Fun\n      if t1.param is t2.param\n        alphaEq t1.body, t2.body\n      else\n        alphaEq t1.body, (substitute t2.body, t2.param, Var(t1.param))\n    when App\n      (alphaEq t1.left, t2.left) and (alphaEq t1.right, t2.right)\n\nfindSynonyms = (term, defs) ->\n  name for name, defTerm of defs when alphaEq term, defTerm\n\ndefaultOptions =\n  maxSteps: 100\n  strategy: 'normal'\n\nreduceFunctions =\n  normal: reduceNormal\n  applicative: reduceApplicative\n  cbn: reduceCallByName\n  cbv: reduceCallByValue\n\n# Reduces a term up to its normal form and returns TODO What does it return?\nreduceTerm = timed 'reduce', (term, defs, options) ->\n  {maxSteps, strategy} = extend {}, defaultOptions, options\n  reduce = reduceFunctions[strategy]\n  enough = {}\n  steps = []\n  try\n    reduce term, (t) ->\n      throw enough if steps.length >= maxSteps\n      steps.push t\n    terminates = yes\n  catch e\n    throw e if e isnt enough\n    terminates = no\n\n  initial = term\n  final = steps[steps.length - 1] or term\n  finalSynonyms = findSynonyms final, defs\n  initial = termStr initial\n  final = termStr final\n  totalSteps = steps.length\n  renderStep = (i, options) ->\n    expandStep steps[i], options\n  {initial, final, finalSynonyms, terminates, totalSteps, renderStep}\n\n# Reduce a program and return with the reduction for each term in the program.\nreduceProgram = (program, options = {}) ->\n  {terms, defs} = parse program\n  reduceTerm term, defs, options for term in terms\n\nmodule.exports = {\n  Var, Fun, App, Def\n  parse\n  termStr\n  reduceProgram\n}\n","{Var, Fun, App, Def} = require './core'\n{timed} = require './helpers'\n\n# Parses an input program string and returns an object with the top-level terms\n# and definitions of the program.\nexports.parse = timed 'parse', (str) ->\n# A custom Jison parser.\n  parser = new (require './grammar').Parser\n\n  # A definition table with the definition term by their names.\n  defs = {}\n  # The terms of the program.\n  terms = []\n\n  # Add some handy functions so the parser can build the AST.\n  parser.yy =\n    parseFunction: Fun\n    parseApplication: App\n    parseDefinition: (name, term) ->\n      throw Error \"#{name} already defined\" if defs[name]\n      defs[name] = term\n    parseTopLevelTerm: (term) -> terms.push term\n    parseIdentifier: Ref\n\n  parser.parse str\n\n  for t in terms\n    resolveTermRefs t, defs\n\n  refNames = {}\n  for name, term of defs\n    resolveDefRefs name, term, defs, refNames\n\n  {defs, terms}\n\n# Temporary term used only while parsing as a placeholder for wither a Var o a\n# Ref. On the first pass the parser cannot know if an identifier is a variable\n# or a definition (because definitions can be declared after their use), so it\n# stores a Ref instead and then on a second pass decides what it should be and\n# *mutates* the Ref in-place to become either a Var or a Ref.\nRef = (name) -> {type: Ref, name}\n\n# Changes all Refs inside term t to either Vars or Defs.\nresolveTermRefs = (t, defs, boundNames = []) ->\n  switch t.type\n    when Ref\n      free = t.name not in boundNames\n      if t.name of defs and free\n        t.type = Def\n        t.term = defs[t.name]\n      else\n        t.type = Var\n    when App\n      resolveTermRefs t.left, defs, boundNames\n      resolveTermRefs t.right, defs, boundNames\n    when Fun\n      resolveTermRefs t.body, defs, boundNames.concat(t.param)\n  undefined\n\n# Changes all Refs inside term t to either Vars or Defs.\nresolveDefRefs = (defName, t, defs, refNames, boundNames = []) ->\n  switch t.type\n    when Ref\n      bound = t.name in boundNames\n      if bound\n        t.type = Var\n      else if t.name of defs\n        (refNames[defName] or= []).push t.name\n        checkForCircularRefs defName, t.name, refNames\n        t.type = Def\n        t.term = defs[t.name]\n      else\n        throw Error \"Illegal free variable \\\"#{t.name}\\\" in \\\"#{defName}\\\".\n          Definitions cannot have free variables\"\n    when App\n      resolveDefRefs defName, t.left, defs, refNames, boundNames\n      resolveDefRefs defName, t.right, defs, refNames, boundNames\n    when Fun\n      resolveDefRefs defName, t.body, defs, refNames, boundNames.concat(t.param)\n  undefined\n\ncheckForCircularRefs = (name, refName, refNames, path = []) ->\n  if name is refName\n    circularNote = path.length and \"In this case the definition does not\n      reference itself directly, but through other definitions:\n      #{[name, path..., name].join ' → '}. \"\n    message = \"Illegal recursive reference in \\\"#{name}\\\". Definitions cannot\n      reference themselves; they are just simple find&replace mechanisms. \" +\n      (circularNote or '') +\n      'If you want to write a recursive function, look for \"Y combinator\" ;)'\n    throw Error message\n  for nextRef in refNames[refName] or {}\n    checkForCircularRefs name, nextRef, refNames, [path..., refName]\n"]}