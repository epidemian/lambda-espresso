{"version":3,"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","dom_1","examples_1","__importDefault","lambda_1","utils_1","enableLogTimings","input","$","output","document","addEventListener","keyCode","ctrlKey","run","event","_a","data","includes","preventDefault","replaced","replace","start","selectionStart","end","selectionEnd","value","slice","_","renderTerm","term","className","renderArrow","symbol","label","arrowSymbols","alpha","beta","eta","def","renderSynonyms","synonyms","join","getOptions","maxReductionSteps","parseInt","strategy","etaEnabled","checked","reductions","reduceProgram","renderReductions","err","textContent","message","String","classList","add","timed","innerHTML","map","renderCollapsedReduction","remove","delegate","element","reduction","nodeIndex","totalSteps","expanded","querySelector","collapsed","toggle","renderExpandedReductionForm","prev","previousElementSibling","renderCollapsedReductionForm","initial","arrow","final","reductionSteps","finalSynonyms","steps","step","renderStep","renderStepOptions","before","after","arrowSymbol","type","arrowLabel","lastStep","push","highlightStep","s","highlightFormerTerm","highlightSubstitutionTerm","dedent","focus","examplesMenu","examplesHtml","default","example","href","encodeURI","name","scrollTop","examplesDropdown","contains","stopPropagation","once","encodeURIComponent","location","hash","updateInputFromHash","decodeURIComponent","codeStart","indexOf","window","eventType","selector","handler","target","Element","closest","Array","prototype","parentNode","childNodes","examples","substitute_1","terms_1","alphaEq","t1","t2","left","right","param","body","substitute","Var","format","appParens","funParens","highlight","h","identity","highlightVar","lambda","funStr","lStr","rStr","appStr","freeIn","x","grammar","k","v","l","$V0","$V1","$V2","$V3","$V4","$V5","parser","trace","yy","symbols_","error","root","program","EOF","line","SEPARATOR","ident","LAMBDA","IDENT","$accept","$end","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","this","parseTopLevelTerm","parseDefinition","parseFunction","parseApplication","parseIdentifier","table","defaultActions","parseError","str","recoverable","parse","self","stack","tstack","vstack","lstack","recovering","TERROR","args","arguments","lexer","Object","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","popStack","_token_stack","lex","token","preErrorSymbol","state","action","yyval","len","newState","expected","errStr","showPosition","text","match","loc","first_line","last_line","first_column","last_column","range","apply","concat","openParens","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","INITIAL","inclusive","Parser","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","argv","composeFun","fn","b","Fun","composeAppL","App","composeAppR","markStep","assign","__exportStar","parse_1","defineProperty","enumerable","get","format_1","reduce_program_1","grammar_1","defs","terms","forEach","resolveTermRefs","refNames","keys","resolveDefRefs","boundNames","free","defName","bound","checkForCircularRefs","collapseWhitespace","boundOnBody","refName","path","circularNote","nextRefs","nextRef","alpha_eq_1","reduce_1","reduceTerm","enough","terminates","stepTerm","findStep","last","findSynonyms","expandStep","highlightFunctionVar","fun","hs","ha","beforeStr","replaceStep","afterStr","hx","ht","replacement","free_in_1","helpers_1","reduce","cb","reducer","reduceFunctions","reduced","reduceEta","reduceCallByName","resolveDefinition","reduceNormal","reduceCallByValue","reduceApplicative","subst","renameCb","renamedBody","renameForSubstitution","renamed","applied","applySubstitution","normal","applicative","cbn","cbv","newVarName","renameVar","oldName","base","newName","isValid","varRenameCollides","Def","logTimings","time","res","timeEnd","disableLogTimings","indent","min","re","RegExp","unindented","trim"],"sourceRoot":".","sources":["node_modules/browser-pack/_prelude.js","src/app.ts","src/dom.ts","src/examples.ts","src/lambda/alpha-eq.ts","src/lambda/format.ts","src/lambda/free-in.ts","src/lambda/grammar.js","src/lambda/helpers.ts","src/lambda/index.ts","src/lambda/parse.ts","src/lambda/reduce-program.ts","src/lambda/reduce.ts","src/lambda/substitute.ts","src/lambda/terms.ts","src/utils.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Script for index.html\nimport { $, delegate, nodeIndex } from './dom'\nimport examples from './examples'\nimport { Options, reduceProgram, Reduction } from './lambda'\nimport { dedent, enableLogTimings, timed } from './utils'\n\nenableLogTimings()\n\nconst input: HTMLInputElement = $('.input')\nconst output = $('.output')\n\n// Run code on ctrl+enter.\ndocument.addEventListener('keyup', e => {\n  if (e.keyCode === 13 && e.ctrlKey) {\n    run()\n  }\n})\n\ninput.addEventListener('beforeinput', event => {\n  // Replace every \"\\\" with \"λ\" while typing.\n  if (event.data?.includes('\\\\')) {\n    event.preventDefault()\n    const replaced = event.data.replace(/\\\\/g, 'λ')\n    const start = input.selectionStart || 0\n    const end = input.selectionEnd || 0\n    const value = input.value\n\n    input.value = value.slice(0, start) + replaced + value.slice(end)\n\n    // Update selection\n    input.selectionStart = input.selectionEnd = start + 1\n  }\n})\n\n$('.run').addEventListener('click', _ => run())\n\nconst renderTerm = (term: string, className = '') =>\n  `<span class=\"term ${className}\">${term}</span>`\n\nconst renderArrow = (symbol: string, label: string) =>\n  `<span class=arrow>${symbol}<small>${label}</small></span>`\n\nconst arrowSymbols = {\n  alpha: 'α',\n  beta: 'β',\n  eta: 'η',\n  def: ''\n}\n\nconst renderSynonyms = (synonyms: string[]) =>\n  synonyms.length ? `<span class=synonyms>(${synonyms.join(', ')})</span>` : ''\n\nconst getOptions = (): Options => {\n  const maxReductionSteps = parseInt(\n    $<HTMLInputElement>('input[name=max-steps]').value || '0',\n    10\n  )\n  const strategy = $<HTMLInputElement>('input[name=strategy]:checked')\n    .value as Options['strategy']\n  const etaEnabled = $<HTMLInputElement>('[name=eta-reductions]').checked\n  return { maxReductionSteps, strategy, etaEnabled }\n}\n\nlet reductions: Reduction[] = []\nconst run = () => {\n  const code = input.value\n  try {\n    reductions = reduceProgram(code, getOptions())\n    renderReductions()\n  } catch (err) {\n    output.textContent = err instanceof Error ? err.message : String(err)\n    output.classList.add('error')\n  }\n}\n\nconst renderReductions = timed('render html', () => {\n  output.innerHTML = reductions.map(renderCollapsedReduction).join('')\n  output.classList.remove('error')\n})\n\ndelegate('click', output, '.reduction', element => {\n  const reduction = reductions[nodeIndex(element)]\n  if (reduction.totalSteps === 0) {\n    return\n  }\n  const expanded = element.querySelector('.expanded')\n  const collapsed = element.querySelector('.collapsed')\n  if (expanded) {\n    expanded.classList.toggle('hidden')\n    collapsed?.classList.toggle('hidden')\n  } else {\n    collapsed?.classList.add('hidden')\n    element.innerHTML += renderExpandedReductionForm(reduction)\n  }\n})\n\ndelegate('mouseover', output, '.expanded .step', element => {\n  element.classList.add('highlight')\n  // Hide the previous step's after term.\n  const prev = element.previousElementSibling\n  if (prev) {\n    prev.querySelector('.after')?.classList.add('hidden')\n  }\n})\n\ndelegate('mouseout', output, '.expanded .step', element => {\n  element.classList.remove('highlight')\n  const prev = element.previousElementSibling\n  if (prev) {\n    prev.querySelector('.after')?.classList.remove('hidden')\n  }\n})\n\nconst renderCollapsedReduction = (reduction: Reduction) =>\n  `<div class=reduction>${renderCollapsedReductionForm(reduction)}</div>`\n\nconst renderCollapsedReductionForm = (reduction: Reduction) => {\n  const initial = renderTerm(reduction.initial)\n  let arrow = ''\n  let final = ''\n  if (reduction.reductionSteps > 0) {\n    arrow = renderArrow('→', `(${reduction.reductionSteps})`)\n    final = renderTerm(reduction.final)\n  }\n  const synonyms = renderSynonyms(reduction.finalSynonyms)\n  return `<div class=collapsed>${initial} ${arrow} ${final} ${synonyms}</div>`\n}\n\nconst renderExpandedReductionForm = (reduction: Reduction) => {\n  const steps = []\n  for (let i = 0; i < reduction.totalSteps; i++) {\n    const step = reduction.renderStep(i, renderStepOptions)\n    const before = renderTerm(step.before, 'before')\n    const after = renderTerm(step.after, 'after')\n    const arrowSymbol = step.type === 'def' ? '≡' : '→'\n    const arrowLabel = arrowSymbols[step.type]\n    const arrow = renderArrow(arrowSymbol, arrowLabel)\n    const lastStep = i === reduction.totalSteps - 1\n    const synonyms = lastStep ? renderSynonyms(reduction.finalSynonyms) : ''\n    steps.push(\n      `<span class=step>${before}<br>${arrow} ${after} ${synonyms}</span>`\n    )\n  }\n\n  return `<div class=expanded>${steps.join('')}</div>`\n}\n\nconst renderStepOptions = {\n  highlightStep: (s: string) => `<span class=match>${s}</span>`,\n  highlightFormerTerm: (s: string) => `<span class=former-term>${s}</span>`,\n  highlightSubstitutionTerm: (s: string) => `<span class=subst-term>${s}</span>`\n}\n\ninput.value = dedent(`\n  ; Write some λ-expressions here and hit Run. Use \"\\\\\" to enter \"λ\" ;)\n  (λx.λy.λz.z y x) a b c\n`)\ninput.focus()\n\nconst examplesMenu = $('.examples-menu')\nconst examplesHtml = examples.map((example, i) => {\n  const href = encodeURI(`#>${example.code}`)\n  return `<li><a href=\"${href}\">${i} - ${example.name}</a></li>`\n})\n\nexamplesMenu.innerHTML = examplesHtml.join('')\ndelegate('click', examplesMenu, 'li', (element, event) => {\n  event.preventDefault() // Don't change the location.hash\n  input.value = examples[nodeIndex(element)].code\n  input.scrollTop = 0\n})\n\nconst examplesDropdown = $('.examples-dropdown')\nexamplesDropdown.addEventListener('click', e => {\n  if (examplesDropdown.classList.contains('active')) {\n    return\n  }\n  e.stopPropagation()\n  examplesDropdown.classList.add('active')\n  document.addEventListener(\n    'click',\n    () => {\n      examplesDropdown.classList.remove('active')\n    },\n    { once: true }\n  )\n})\n\n$('button.link').addEventListener('click', () => {\n  const code = encodeURIComponent(input.value)\n  location.hash = `>${code}`\n})\n\nconst updateInputFromHash = () => {\n  const hash = decodeURIComponent(location.hash)\n  const codeStart = hash.indexOf('>')\n  if (codeStart >= 0) {\n    input.value = hash.slice(codeStart + 1)\n  }\n}\n\nwindow.addEventListener('hashchange', updateInputFromHash)\nupdateInputFromHash()\n","export const $ = <T extends Element>(s: string) =>\n  document.querySelector(s) as T\n\n// Similar to jQuery.fn.on(type, selector, handler)\nexport const delegate = (\n  eventType: string,\n  element: Element,\n  selector: string,\n  handler: (el: Element, ev: Event) => void\n) => {\n  element.addEventListener(eventType, event => {\n    if (event.target instanceof Element) {\n      const closest = event.target.closest(selector)\n      if (closest && element.contains(closest)) {\n        handler(closest, event)\n      }\n    }\n  })\n}\n\nexport const nodeIndex = (element: Element): number => {\n  return Array.prototype.indexOf.call(element.parentNode?.childNodes, element)\n}\n","import { dedent } from './utils'\n\nconst examples = [\n  {\n    name: 'Basics',\n    code: dedent(`\n    ; This example is not intend to be a tutorial nor an introduction to λ Calculus.\n    ; You should check http://en.wikipedia.org/wiki/Lambda_calculus for that :)\n    ; As you can see, these are comments. You can run this example clicking the Run\n    ; button below or pressing Ctrl+Enter.\n    ; So, the three basic types of λ expressions are:\n    ; Variables:\n    x\n    ; Applications:\n    x y\n    ; And lambda abstractions (also known as functions):\n    λx.x\n    ; If the left-side of an application is an abstraction, then a reduction takes place:\n    (λx.x) y\n    ; That little abstraction at the left is the identity, a very simple function that\n    ; just reduces to whatever you apply to it. We can give it a name like so:\n    id = λx.x\n    ; And then just refer it by that name:\n    id a\n    ; You can apply any kind of λ expression to an abstraction, like another function:\n    id λb.c\n    ; Or an application:\n    id (x y)\n    ; Or even the identity function itself:\n    id id\n    ; That means you can apply identity to itself as many times as you want and it'll still\n    ; be identity:\n    id id id id id\n    ; Notice that applications are left-associative, so the line above is equivalent to:\n    ((((id id) id) id) id)\n\n    ; TODO: explain applicative and normal order...\n  `)\n  },\n  {\n    name: 'Booleans',\n    code: dedent(`\n    ; Church booleans\n\n    ; The booleans and their operations can be encoded as the following λ-terms:\n    true = λt.λf.t\n    false = λt.λf.f\n    not = λp.p false true\n    and = λp.λq.p q p\n    or = λp.λq.p p q\n    if = λp.p\n\n    ; Print truth tables for not, and and or:\n    not true\n    not false\n    and false false\n    and false true\n    and true false\n    and true true\n    or false false\n    or false true\n    or true false\n    or true true\n\n    ; Terms can be nested as much as we want:\n    if (not (not true)) (or false (if true true false)) false\n\n    ; There's nothing special about \"operators\", we can treat them as any other value:\n    (if false or and) true false\n  `)\n  },\n  {\n    name: 'Numbers',\n    code: dedent(`\n    ; Church numerals\n\n    ; The first few numbers are:\n    zero = λs.λz.z\n    one = λs.λz.s z\n    two = λs.λz.s (s z)\n    three = λs.λz.s (s (s z))\n    ; In general, any natural number n can be encoded as:\n    ; N = λs.λz.s (s (s ... (s (s z)) ... ))\n    ; with s applied n times.\n\n    ; When we get tired of writing numbers like that, we can define a successor function:\n    succ = λn.λs.λz.s (n s z)\n    succ three\n\n    ; We can think of Church numerals as functions that apply a given function s to a\n    ; given value z a number of times. Zero will apply it 0 times (i.e. it'll give\n    ; us z back untouched) and three will call it 3 times.\n    ; So, we can represent the addition of numbers m and n as first applying n times s to z,\n    ; and then applying m times s to that:\n    add = λm.λn.λs.λz.m s (n s z)\n    add two three\n    ; ...or, more succinctly, as applying n times the successor function on m (or vice versa):\n    add' = λm.λn.n succ m\n    add' two three\n    ; Conversely, we could define the successor function as adding one:\n    succ' = add one\n    succ' three\n\n    ; Multiplication of m by n is applying m times a function that applies s n times:\n    mult = λm.λn.λs.m (n s)\n    mult three three\n    ; ...or applying m times the addition of n to zero:\n    mult' = λm.λn.m (add n) zero\n    mult' three three\n\n    ; Exponentiation n^m has a simple encoding: applying the base m to the exponent n,\n    ; which can be understood as applying m successively n times:\n    exp = λm.λn.n m\n    exp two three\n    ; ...or, alternatively, applying m times the multiplication by n to one:\n    exp' = λm.λn.m (mult n) one\n    exp' two three\n\n    ; The encoding for the predecessor function is quite complex.\n    ; The Wikipedia article on Church encoding has a good explanation for this term ;-)\n    pred = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    pred three\n\n    ; But given the predecessor function is then easy to define the subtraction:\n    sub = λm.λn.n pred m\n    sub three two\n\n    ; To build some predicate functions, we'll use some known boolean terms (see\n    ; Booleans example for more info):\n    true = λt.λf.t\n    false = λt.λf.f\n    and = λp.λq.p q p\n\n    ; To know if a number n is zero we can pass true as the base value and a function\n    ; that always returns false (note that the \"?\" is no special syntax; it's just\n    ; part of the name of the predicate):\n    zero? = λn.n (λx.false) true\n    zero? zero\n    zero? two\n\n    ; To know if a number is less or equal to another number, we can subtract them and\n    ; see if the result is zero:\n    leq = λm.λn.zero? (sub m n)\n\n    ; And given that predicate, numeric equality between m and n can be defined as:\n    eq = λm.λn.and (leq m n) (leq n m)\n\n    ; Throwing everything into the mix, we can prove that 2³ = 3² - 1:\n    eq (exp two three) (pred (exp three two))\n  `)\n  },\n  {\n    name: 'Factorial',\n    code: dedent(`\n    ; Factorial function and recursion\n\n    ; Note: for this example we'll use boolean and numeric terms from previous\n    ; examples (see below).\n    ; Also not that these factorial definitions won't work with applicative order ;)\n\n    ; We'd like to be able to define a factorial function as:\n    ; fact = λn.if (zero? n) one (mult n (fact (pred n)))\n    ; But we can't use a term in its own definition.\n    ; To achieve recursion, we can instead define a function that will receive itself\n    ; as a parameter r, and then recur by calling r with itself and n - 1:\n    fact-rec = λr.λn.if (zero? n) one (mult n (r r (pred n)))\n    ; The real factorial function would then be:\n    fact = fact-rec fact-rec\n    fact four\n\n    ; Another way to recur is to use a general purpose fixed-point combinator.\n    ; Behold, the almighty Y Combinator:\n    Y = λf.(λx.f (x x)) (λx.f (x x))\n    ; And then there's no need to define a separate function:\n    fact2 = Y λr.λn.if (zero? n) one (mult n (r (pred n)))\n    fact2 four\n\n    ; A different way of computing the factorial of n is to use the number n itself\n    ; as a function that will call a given function n times, starting with a given value.\n    ; The function given will take a pair [a, b] and return a new pair [a-1, a*b], and start with [n, 1].\n    ; After applying this given function n times, the resulting pair will be [0, factorial(n)],\n    ; of which we take the 2nd component.\n    ; This way of defining factorial requires much fewer reduction steps.\n    fact3 = λn.2nd (n (λp.pair (pred (1st p)) (mult (1st p) (2nd p))) (pair n one))\n    fact3 four\n\n    ; Yet another way of defining factorial is as the successive multiplication of the numbers n...1,\n    ; which results in this very elegant solution:\n    fact4 = λn.reduce mult (iota n) one\n    fact4 four\n\n    ; Pair-handling functions:\n    pair = λx.λy.λf.f x y\n    1st = λp.p (λx.λy.x)\n    2nd = λp.p (λx.λy.y)\n\n    ; List-handling functions. Lists can be considered functions handling a nil (empty) case\n    ; and a cons (head+tail) case:\n    nil = λn.λc.n\n    cons = λh.λt.λn.λc.c h t\n    reduce = Y λr.λf.λlist.λinitial.list initial (λh.λt.f h (r f t initial))\n    ; For a given number n, iota produces the list of numbers 1, 2, ..., n\n    iota = λn.n (λlist.list (cons n nil) (λh.λt.cons (pred h) list)) nil\n\n    ; Borrow some terms from previous examples:\n    true = λt.λf.t\n    false = λt.λf.f\n    if = λp.p\n    zero = λs.λz.z\n    one = λs.λz.s z\n    two = λs.λz.s (s z)\n    three = λs.λz.s (s (s z))\n    four = λs.λz.s (s (s (s z)))\n    succ = λn.λs.λz.s (n s z)\n    pred = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    mult = λm.λn.λs.m (n s)\n    zero? = λn.n (λx.false) true\n  `)\n  },\n  {\n    name: 'Extras',\n    code: dedent(`\n    ; Syntactic Trivia and Miscellaneous\n\n    ; Identifiers can contain basically any character (except the few ones reserved for\n    ; syntax: \"λ\", \".\", \"=\", \"(\" and \")\").\n    ; This means you can write some pretty code-looking lambda terms!\n    0 = λs.λz.z\n    1 = λs.λz.s z\n    2 = λs.λz.s (s z)\n    + = λm.λn.λs.λz.m s (n s z)\n    * = λm.λn.λs.m (n s)\n    (+ (* 2 1) 0)\n    ; Reinventing (a part of) Lisp is always fun...\n\n    ; You can even use emojis as identifiers! But make sure to use this power responsibly.\n    (λ🐴.❓) 🍎\n\n    ; Although line breaks usually act as separators between terms/definitions,\n    ; you can use parentheses to split a complex term into multiple lines:\n    fib = Y λf.λn.(\n      if (≤ n 1)\n         n\n         (+ (f (- n 1))\n            (f (- n 2))))\n    fib 0\n    fib 1\n    fib 2\n    fib 7\n\n    ; The rest of the definitions to make the above code work. Not much to see here...\n    Y = λf.(λx.f (x x)) (λx.f (x x))\n    - = λm.λn.n pred m\n    ≤ = λm.λn.zero? (- m n)\n    pred = λn.λs.λz.n (λf.λg.g (f s)) (λx.z) (λx.x)\n    zero? = λn.n (λx.false) true\n    true = λt.λf.t\n    false = λt.λf.f\n    if = λp.p\n    7 = λs.λz.s (s (s (s (s (s (s z))))))\n    13 = λs.λz.s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))\n    ❓ = λ💩.💩 💩 💩\n  `)\n  }\n]\n\nexport default examples\n","import { substitute } from './substitute'\nimport { Term, Var } from './terms'\n\n// Whether two terms are alpha-equivalent.\nconst alphaEq = (t1: Term, t2: Term): boolean => {\n  if (t1.type === 'def') {\n    return alphaEq(t1.term, t2)\n  }\n  if (t2.type === 'def') {\n    return alphaEq(t1, t2.term)\n  }\n  if (t1.type === 'var' && t2.type === 'var') {\n    return t1.name === t2.name\n  }\n  if (t1.type === 'app' && t2.type === 'app') {\n    return alphaEq(t1.left, t2.left) && alphaEq(t1.right, t2.right)\n  }\n  if (t1.type === 'fun' && t2.type === 'fun') {\n    if (t1.param === t2.param) {\n      return alphaEq(t1.body, t2.body)\n    } else {\n      return alphaEq(t1.body, substitute(t2.body, t2.param, Var(t1.param)))\n    }\n  }\n  return false\n}\n\nexport default alphaEq\n","import { identity } from '../utils'\nimport { Term } from './terms'\n\n// Returns the string representation for a given term t.\nconst format = (t: Term, appParens = false, funParens = false): string => {\n  // TODO: Remove highlighting hack of storing data on terms.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { highlight: h = identity, highlightVar } = t as any\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return h(t.name)\n    case 'fun':\n      let lambda = `λ${t.param}`\n      if (highlightVar) {\n        lambda = highlightVar(lambda)\n      }\n      const funStr = `${lambda}.${format(t.body)}`\n      return h(funParens ? `(${funStr})` : funStr)\n    case 'app':\n      const lStr = format(t.left, false, true)\n      const rStr = format(t.right, true, funParens)\n      const appStr = `${lStr} ${rStr}`\n      return h(appParens ? `(${appStr})` : appStr)\n  }\n}\n\nexport default format\n","import { Term } from './terms'\n\n// Whether the variable x appears free in the term t.\nconst freeIn = (x: string, t: Term): boolean => {\n  switch (t.type) {\n    case 'var':\n      return t.name === x\n    case 'fun':\n      return t.param !== x && freeIn(x, t.body)\n    case 'app':\n      return freeIn(x, t.left) || freeIn(x, t.right)\n    case 'def':\n      // Definitions don't have free variables.\n      return false\n  }\n}\n\nexport default freeIn\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar grammar = (function () {\n  var o = function (k, v, o, l) {\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n      return o\n    },\n    $V0 = [5, 7],\n    $V1 = [1, 6],\n    $V2 = [1, 7],\n    $V3 = [1, 8],\n    $V4 = [2, 10],\n    $V5 = [5, 7, 11, 13, 14, 15]\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      error: 2,\n      root: 3,\n      program: 4,\n      EOF: 5,\n      line: 6,\n      SEPARATOR: 7,\n      term: 8,\n      ident: 9,\n      '=': 10,\n      LAMBDA: 11,\n      '.': 12,\n      '(': 13,\n      ')': 14,\n      IDENT: 15,\n      $accept: 0,\n      $end: 1\n    },\n    terminals_: {\n      2: 'error',\n      5: 'EOF',\n      7: 'SEPARATOR',\n      10: '=',\n      11: 'LAMBDA',\n      12: '.',\n      13: '(',\n      14: ')',\n      15: 'IDENT'\n    },\n    productions_: [\n      0,\n      [3, 2],\n      [4, 0],\n      [4, 1],\n      [4, 2],\n      [4, 3],\n      [6, 1],\n      [6, 3],\n      [8, 4],\n      [8, 2],\n      [8, 1],\n      [8, 3],\n      [9, 1]\n    ],\n    performAction: function anonymous(\n      yytext,\n      yyleng,\n      yylineno,\n      yy,\n      yystate /* action[1] */,\n      $$ /* vstack */,\n      _$ /* lstack */\n    ) {\n      /* this == yyval */\n\n      var $0 = $$.length - 1\n      switch (yystate) {\n        case 1:\n          /* do nothing; terms and definitions already collected */\n\n          break\n        case 6:\n          this.$ = yy.parseTopLevelTerm($$[$0])\n          break\n        case 7:\n          this.$ = yy.parseDefinition($$[$0 - 2], $$[$0])\n          break\n        case 8:\n          this.$ = yy.parseFunction($$[$0 - 2], $$[$0])\n          break\n        case 9:\n          this.$ = yy.parseApplication($$[$0 - 1], $$[$0])\n          break\n        case 10:\n          this.$ = yy.parseIdentifier($$[$0])\n          break\n        case 11:\n          this.$ = $$[$0 - 1]\n          break\n        case 12:\n          this.$ = yytext\n          break\n      }\n    },\n    table: [\n      o($V0, [2, 2], {\n        3: 1,\n        4: 2,\n        6: 3,\n        8: 4,\n        9: 5,\n        11: $V1,\n        13: $V2,\n        15: $V3\n      }),\n      { 1: [3] },\n      { 5: [1, 9], 7: [1, 10] },\n      o($V0, [2, 3]),\n      o($V0, [2, 6], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 }),\n      o([5, 7, 11, 13, 15], $V4, { 10: [1, 13] }),\n      { 9: 14, 15: $V3 },\n      { 8: 15, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      o([5, 7, 10, 11, 12, 13, 14, 15], [2, 12]),\n      { 1: [2, 1] },\n      o($V0, [2, 4], { 8: 4, 9: 5, 6: 16, 11: $V1, 13: $V2, 15: $V3 }),\n      o($V5, [2, 9], { 8: 11, 9: 12 }),\n      o($V5, $V4),\n      { 8: 17, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      { 12: [1, 18] },\n      { 8: 11, 9: 12, 11: $V1, 13: $V2, 14: [1, 19], 15: $V3 },\n      o($V0, [2, 5]),\n      o($V0, [2, 7], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 }),\n      { 8: 20, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      o($V5, [2, 11]),\n      o([5, 7, 14], [2, 8], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 })\n    ],\n    defaultActions: { 9: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str)\n      } else {\n        var error = new Error(str)\n        error.hash = hash\n        throw error\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1\n      var args = lstack.slice.call(arguments, 1)\n      var lexer = Object.create(this.lexer)\n      var sharedState = { yy: {} }\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k]\n        }\n      }\n      lexer.setInput(input, sharedState.yy)\n      sharedState.yy.lexer = lexer\n      sharedState.yy.parser = this\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {}\n      }\n      var yyloc = lexer.yylloc\n      lstack.push(yyloc)\n      var ranges = lexer.options && lexer.options.ranges\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError\n      }\n      function popStack(n) {\n        stack.length = stack.length - 2 * n\n        vstack.length = vstack.length - n\n        lstack.length = lstack.length - n\n      }\n      _token_stack: var lex = function () {\n        var token\n        token = lexer.lex() || EOF\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token\n        }\n        return token\n      }\n      var symbol,\n        preErrorSymbol,\n        state,\n        action,\n        a,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected\n      while (true) {\n        state = stack[stack.length - 1]\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state]\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex()\n          }\n          action = table[state] && table[state][symbol]\n        }\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = ''\n          expected = []\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\")\n            }\n          }\n          if (lexer.showPosition) {\n            errStr =\n              'Parse error on line ' +\n              (yylineno + 1) +\n              ':\\n' +\n              lexer.showPosition() +\n              '\\nExpecting ' +\n              expected.join(', ') +\n              \", got '\" +\n              (this.terminals_[symbol] || symbol) +\n              \"'\"\n          } else {\n            errStr =\n              'Parse error on line ' +\n              (yylineno + 1) +\n              ': Unexpected ' +\n              (symbol == EOF\n                ? 'end of input'\n                : \"'\" + (this.terminals_[symbol] || symbol) + \"'\")\n          }\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          })\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\n            'Parse Error: multiple actions possible at state: ' +\n              state +\n              ', token: ' +\n              symbol\n          )\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol)\n            vstack.push(lexer.yytext)\n            lstack.push(lexer.yylloc)\n            stack.push(action[1])\n            symbol = null\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng\n              yytext = lexer.yytext\n              yylineno = lexer.yylineno\n              yyloc = lexer.yylloc\n              if (recovering > 0) {\n                recovering--\n              }\n            } else {\n              symbol = preErrorSymbol\n              preErrorSymbol = null\n            }\n            break\n          case 2:\n            len = this.productions_[action[1]][1]\n            yyval.$ = vstack[vstack.length - len]\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            }\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ]\n            }\n            r = this.performAction.apply(\n              yyval,\n              [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n              ].concat(args)\n            )\n            if (typeof r !== 'undefined') {\n              return r\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2)\n              vstack = vstack.slice(0, -1 * len)\n              lstack = lstack.slice(0, -1 * len)\n            }\n            stack.push(this.productions_[action[1]][0])\n            vstack.push(yyval.$)\n            lstack.push(yyval._$)\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]]\n            stack.push(newState)\n            break\n          case 3:\n            return true\n        }\n      }\n      return true\n    }\n  }\n  var openParens = 0 /* generated by jison-lex 0.3.4 */\n  var lexer = (function () {\n    var lexer = {\n      EOF: 1,\n\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash)\n        } else {\n          throw new Error(str)\n        }\n      },\n\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {}\n        this._input = input\n        this._more = this._backtrack = this.done = false\n        this.yylineno = this.yyleng = 0\n        this.yytext = this.matched = this.match = ''\n        this.conditionStack = ['INITIAL']\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        }\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0]\n        }\n        this.offset = 0\n        return this\n      },\n\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0]\n        this.yytext += ch\n        this.yyleng++\n        this.offset++\n        this.match += ch\n        this.matched += ch\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g)\n        if (lines) {\n          this.yylineno++\n          this.yylloc.last_line++\n        } else {\n          this.yylloc.last_column++\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++\n        }\n\n        this._input = this._input.slice(1)\n        return ch\n      },\n\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g)\n\n        this._input = ch + this._input\n        this.yytext = this.yytext.substr(0, this.yytext.length - len)\n        //this.yyleng -= len;\n        this.offset -= len\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g)\n        this.match = this.match.substr(0, this.match.length - 1)\n        this.matched = this.matched.substr(0, this.matched.length - 1)\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1\n        }\n        var r = this.yylloc.range\n\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines\n            ? (lines.length === oldLines.length\n                ? this.yylloc.first_column\n                : 0) +\n              oldLines[oldLines.length - lines.length].length -\n              lines[0].length\n            : this.yylloc.first_column - len\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len]\n        }\n        this.yyleng = this.yytext.length\n        return this\n      },\n\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true\n        return this\n      },\n\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true\n        } else {\n          return this.parseError(\n            'Lexical error on line ' +\n              (this.yylineno + 1) +\n              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' +\n              this.showPosition(),\n            {\n              text: '',\n              token: null,\n              line: this.yylineno\n            }\n          )\n        }\n        return this\n      },\n\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n))\n      },\n\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(\n          0,\n          this.matched.length - this.match.length\n        )\n        return (\n          (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, '')\n        )\n      },\n\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length)\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(\n          /\\n/g,\n          ''\n        )\n      },\n\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput()\n        var c = new Array(pre.length + 1).join('-')\n        return pre + this.upcomingInput() + '\\n' + c + '^'\n      },\n\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          }\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0)\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g)\n        if (lines) {\n          this.yylineno += lines.length\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines\n            ? lines[lines.length - 1].length -\n              lines[lines.length - 1].match(/\\r?\\n?/)[0].length\n            : this.yylloc.last_column + match[0].length\n        }\n        this.yytext += match[0]\n        this.match += match[0]\n        this.matches = match\n        this.yyleng = this.yytext.length\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, (this.offset += this.yyleng)]\n        }\n        this._more = false\n        this._backtrack = false\n        this._input = this._input.slice(match[0].length)\n        this.matched += match[0]\n        token = this.performAction.call(\n          this,\n          this.yy,\n          this,\n          indexed_rule,\n          this.conditionStack[this.conditionStack.length - 1]\n        )\n        if (this.done && this._input) {\n          this.done = false\n        }\n        if (token) {\n          return token\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k]\n          }\n          return false // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false\n      },\n\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF\n        }\n        if (!this._input) {\n          this.done = true\n        }\n\n        var token, match, tempMatch, index\n        if (!this._more) {\n          this.yytext = ''\n          this.match = ''\n        }\n        var rules = this._currentRules()\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]])\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch\n            index = i\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i])\n              if (token !== false) {\n                return token\n              } else if (this._backtrack) {\n                match = false\n                continue // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false\n              }\n            } else if (!this.options.flex) {\n              break\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index])\n          if (token !== false) {\n            return token\n          }\n          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n          return false\n        }\n        if (this._input === '') {\n          return this.EOF\n        } else {\n          return this.parseError(\n            'Lexical error on line ' +\n              (this.yylineno + 1) +\n              '. Unrecognized text.\\n' +\n              this.showPosition(),\n            {\n              text: '',\n              token: null,\n              line: this.yylineno\n            }\n          )\n        }\n      },\n\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next()\n        if (r) {\n          return r\n        } else {\n          return this.lex()\n        }\n      },\n\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition)\n      },\n\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1\n        if (n > 0) {\n          return this.conditionStack.pop()\n        } else {\n          return this.conditionStack[0]\n        }\n      },\n\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (\n          this.conditionStack.length &&\n          this.conditionStack[this.conditionStack.length - 1]\n        ) {\n          return this.conditions[\n            this.conditionStack[this.conditionStack.length - 1]\n          ].rules\n        } else {\n          return this.conditions['INITIAL'].rules\n        }\n      },\n\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0)\n        if (n >= 0) {\n          return this.conditionStack[n]\n        } else {\n          return 'INITIAL'\n        }\n      },\n\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition)\n      },\n\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length\n      },\n      options: {},\n      performAction: function anonymous(\n        yy,\n        yy_,\n        $avoiding_name_collisions,\n        YY_START\n      ) {\n        var YYSTATE = YY_START\n        switch ($avoiding_name_collisions) {\n          case 0:\n            openParens++\n            return 13\n            break\n          case 1:\n            openParens--\n            return 14\n            break\n          case 2:\n            return 11\n            break\n          case 3:\n            return 12\n            break\n          case 4:\n            return 10\n            break\n          case 5 /* ignore separators inside parens */:\n            if (openParens <= 0) return 7\n\n            break\n          case 6 /* ignore whitespace */:\n            break\n          case 7 /* ignore line comments */:\n            break\n          case 8:\n            return 15\n            break\n          case 9:\n            return 5\n            break\n        }\n      },\n      rules: [\n        /^(?:\\()/,\n        /^(?:\\))/,\n        /^(?:\\\\|λ)/,\n        /^(?:\\.)/,\n        /^(?:=)/,\n        /^(?:\\n)/,\n        /^(?:[^\\S\\n]+)/,\n        /^(?:;.*)/,\n        /^(?:[^\\s\\(\\)\\\\λ\\.=]+)/,\n        /^(?:$)/\n      ],\n      conditions: {\n        INITIAL: { rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], inclusive: true }\n      }\n    }\n    return lexer\n  })()\n  parser.lexer = lexer\n  function Parser() {\n    this.yy = {}\n  }\n  Parser.prototype = parser\n  parser.Parser = Parser\n  return new Parser()\n})()\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = grammar\n  exports.Parser = grammar.Parser\n  exports.parse = function () {\n    return grammar.parse.apply(grammar, arguments)\n  }\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE')\n      process.exit(1)\n    }\n    var source = require('fs').readFileSync(\n      require('path').normalize(args[1]),\n      'utf8'\n    )\n    return exports.parser.parse(source)\n  }\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1))\n  }\n}\n","import { App, Def, Fun, Term } from './terms'\n\nexport type Callback = (t: Term) => void\n\n// Compose a callback function with a term constructor.\nexport const composeFun = (fn: Callback, x: string) => (b: Term) =>\n  fn(Fun(x, b))\nexport const composeAppL = (fn: Callback, l: Term) => (r: Term) => fn(App(l, r))\nexport const composeAppR = (fn: Callback, r: Term) => (l: Term) => fn(App(l, r))\n\nexport type Definitions = { [key: string]: Term }\n\n// Represents a reduction \"step\" as displayed on the application.\nexport type Step =\n  | { type: 'alpha'; before: Fun; after: Fun }\n  | { type: 'beta'; before: App; after: Term }\n  | { type: 'eta'; before: Fun; after: Term }\n  | { type: 'def'; before: Def; after: Term }\n\nexport type AnnotatedTerm = Term & { step: Step }\n\n// Mark a reduction step on the `after` term.\nexport const markStep = (step: Step): AnnotatedTerm => ({ ...step.after, step })\n","export * from './terms'\nexport { default as parse } from './parse'\nexport { default as format } from './format'\nexport { reduceProgram, Reduction, Options } from './reduce-program'\nexport { Definitions } from './helpers'\n","import { collapseWhitespace, timed } from '../utils'\nimport { Parser } from './grammar'\nimport { Definitions } from './helpers'\nimport { App, Fun, Term } from './terms'\n\n// Parses an input program string and returns an object with the top-level terms\n// and definitions of the program.\nconst parse = timed('parse', (str: string) => {\n  // A custom Jison parser.\n  const parser = new Parser()\n\n  // A definition table with the definition term by their names.\n  const defs: Definitions = {}\n  // The terms of the program.\n  const terms: Term[] = []\n\n  // Add some handy functions so the parser can build the AST.\n  parser.yy = {\n    parseFunction: Fun,\n    parseApplication: App,\n    parseDefinition: (name: string, term: Term) => {\n      if (defs[name]) {\n        throw Error(`${name} already defined`)\n      }\n      defs[name] = term\n    },\n    parseTopLevelTerm: (term: Term) => {\n      terms.push(term)\n    },\n    parseIdentifier: (name: string) => ({ type: 'ref', name })\n  }\n\n  parser.parse(str)\n\n  terms.forEach(t => resolveTermRefs(t, defs))\n\n  const refNames = {}\n  Object.keys(defs).forEach(name => {\n    resolveDefRefs(name, defs[name], defs, refNames)\n  })\n\n  return { defs, terms }\n})\n\nexport default parse\n\n// Temporary term used only while parsing as a placeholder for wither a Var o a\n// Ref. On the first pass the parser cannot know if an identifier is a variable\n// or a definition (because definitions can be declared after their use), so it\n// stores a Ref instead and then on a second pass decides what it should be and\n// *mutates* the Ref in-place to become either a Var or a Ref.\n// TODO: Remove this hack.\ntype TermOrRef = Term | { type: 'ref'; name: string }\n\n// Changes all Refs inside term t to either Vars or Defs.\nconst resolveTermRefs = (\n  t: TermOrRef,\n  defs: Definitions,\n  boundNames: string[] = []\n) => {\n  switch (t.type) {\n    case 'ref':\n      const free = boundNames.indexOf(t.name) < 0\n      if (t.name in defs && free) {\n        Object.assign(t, { type: 'def', term: defs[t.name] })\n      } else {\n        Object.assign(t, { type: 'var' })\n      }\n      break\n    case 'app':\n      resolveTermRefs(t.left, defs, boundNames)\n      resolveTermRefs(t.right, defs, boundNames)\n      break\n    case 'fun':\n      resolveTermRefs(t.body, defs, boundNames.concat(t.param))\n      break\n  }\n}\n\ntype RefNames = { [key: string]: string[] }\n\n// Changes all Refs inside term t to either Vars or Defs.\nconst resolveDefRefs = (\n  defName: string,\n  t: TermOrRef,\n  defs: Definitions,\n  refNames: RefNames,\n  boundNames: string[] = []\n) => {\n  switch (t.type) {\n    case 'ref':\n      const bound = boundNames.indexOf(t.name) >= 0\n      if (bound) {\n        Object.assign(t, { type: 'var' })\n      } else if (t.name in defs) {\n        refNames[defName] = [...(refNames[defName] || []), t.name]\n        checkForCircularRefs(defName, t.name, refNames)\n        Object.assign(t, { type: 'def', term: defs[t.name] })\n      } else {\n        throw Error(\n          collapseWhitespace(\n            `Illegal free variable \"${t.name}\" in \"${defName}\".\n        Definitions cannot have free variables.`\n          )\n        )\n      }\n      break\n    case 'app':\n      resolveDefRefs(defName, t.left, defs, refNames, boundNames)\n      resolveDefRefs(defName, t.right, defs, refNames, boundNames)\n      break\n    case 'fun':\n      const boundOnBody = boundNames.concat(t.param)\n      resolveDefRefs(defName, t.body, defs, refNames, boundOnBody)\n      break\n  }\n}\n\nconst checkForCircularRefs = (\n  name: string,\n  refName: string,\n  refNames: RefNames,\n  path: string[] = []\n) => {\n  if (name === refName) {\n    const circularNote = path.length\n      ? `In this case the definition does not reference itself directly, but\n        through other definitions: ${[name, ...path, name].join(' → ')}.`\n      : ''\n    throw Error(\n      collapseWhitespace(\n        `Illegal recursive reference in \"${name}\". Definitions cannot\n      reference themselves; they are just simple find&replace mechanisms.\n      ${circularNote}\n      If you want to write a recursive function, look for \"Y combinator\" ;)`\n      )\n    )\n  }\n\n  const nextRefs = refNames[refName] || []\n  nextRefs.forEach(nextRef =>\n    checkForCircularRefs(name, nextRef, refNames, [...path, refName])\n  )\n}\n","import { identity, timed } from '../utils'\nimport alphaEq from './alpha-eq'\nimport format from './format'\nimport { AnnotatedTerm, Definitions, Step } from './helpers'\nimport parse from './parse'\nimport reduce, { Options as ReduceOptions } from './reduce'\nimport { substitute } from './substitute'\nimport { App, Fun, Term, Var } from './terms'\n\nexport type Options = Partial<ReduceOptions> & {\n  maxReductionSteps?: number\n}\n\nexport type Reduction = {\n  initial: string\n  final: string\n  finalSynonyms: string[]\n  terminates: boolean\n  reductionSteps: number\n  totalSteps: number\n  renderStep: (i: number, options?: RenderStepOptions) => RenderedStep\n}\n\ntype RenderStepOptions = {\n  highlightFormerTerm?: StrFun\n  highlightSubstitutionTerm?: StrFun\n  highlightStep?: StrFun\n}\n\ntype StrFun = (s: string) => string\n\ntype RenderedStep = {\n  type: 'alpha' | 'beta' | 'eta' | 'def'\n  before: string\n  after: string\n}\n\n// Reduce a program and return with the reduction for each term in the program.\nexport const reduceProgram = (program: string, options: Options = {}) => {\n  const { terms, defs } = parse(program)\n  return terms.map(term => reduceTerm(term, defs, options))\n}\n\n// Reduces a term up to its normal form.\nlet reduceTerm = (\n  term: Term,\n  defs: Definitions,\n  { maxReductionSteps = 100, strategy = 'normal', etaEnabled = false }: Options\n): Reduction => {\n  const enough = {}\n  const steps: Term[] = []\n  let reductionSteps = 0\n  let terminates = false\n  try {\n    reduce(term, { strategy, etaEnabled }, stepTerm => {\n      if (reductionSteps >= maxReductionSteps) {\n        throw enough\n      }\n      steps.push(stepTerm)\n\n      // TODO: it'd be nice if we didn't need to find the step type on the term\n      // on each step. Maybe the callback function could receive the step type\n      // as an argument.\n      const step = findStep(stepTerm)\n      if (!step) {\n        throw new Error('Unexpected: term should always have a step')\n      }\n      if (step.type === 'beta' || step.type === 'eta') {\n        reductionSteps += 1\n      }\n    })\n    terminates = true\n  } catch (e) {\n    if (e !== enough) {\n      throw e\n    }\n    terminates = false\n  }\n\n  const last = steps[steps.length - 1] || term\n  return {\n    initial: format(term),\n    final: format(last),\n    finalSynonyms: findSynonyms(last, defs),\n    terminates,\n    reductionSteps,\n    totalSteps: steps.length,\n    renderStep: (i, options) => expandStep(steps[i], options)\n  }\n}\nreduceTerm = timed('reduce', reduceTerm)\n\nconst expandStep = (t: Term, options: RenderStepOptions = {}) => {\n  const step = findStep(t)\n  if (!step) {\n    throw new Error('Unexpected: term should always have a step')\n  }\n\n  let before: Term = step.before\n  let after: Term = step.after\n\n  const {\n    highlightFormerTerm = identity,\n    highlightSubstitutionTerm = identity,\n    highlightStep = identity\n  } = options\n\n  switch (step.type) {\n    case 'alpha':\n      before = highlightFunctionVar(\n        step.before.body,\n        step.before.param,\n        highlightFormerTerm\n      )\n      after = highlightFunctionVar(\n        step.after.body,\n        step.after.param,\n        highlightSubstitutionTerm\n      )\n      break\n    case 'beta':\n      const fun = step.before.left as Fun\n      const hs = highlight(step.before.right, highlightSubstitutionTerm)\n      const ha = highlightFunctionVar(fun.body, fun.param, highlightFormerTerm)\n      before = App(ha, hs)\n      after = substitute(fun.body, fun.param, hs)\n      break\n    case 'eta':\n    case 'def':\n      before = highlight(step.before, highlightFormerTerm)\n      after = highlight(step.after, highlightSubstitutionTerm)\n      break\n  }\n\n  before = highlight(before, highlightStep)\n  after = highlight(after, highlightStep)\n\n  const beforeStr = format(replaceStep(t, before))\n  const afterStr = format(replaceStep(t, after))\n\n  return { type: step.type, before: beforeStr, after: afterStr }\n}\n\nconst highlight = (t: Term, fn: StrFun) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const h: StrFun = (t as any).highlight\n  const highlight: StrFun = h ? s => fn(h(s)) : fn\n  return { ...t, highlight }\n}\n\nconst highlightFunctionVar = (t: Term, x: string, fn: StrFun) => {\n  const hx = highlight(Var(x), fn)\n  const ht = substitute(t, x, hx)\n  return { ...Fun(x, ht), highlightVar: fn }\n}\n\nconst findStep = (t: Term | AnnotatedTerm): Step | undefined => {\n  if ('step' in t) {\n    return t.step\n  }\n\n  switch (t.type) {\n    case 'fun':\n      return findStep(t.body)\n    case 'app':\n      return findStep(t.left) || findStep(t.right)\n  }\n}\n\nconst replaceStep = (t: Term | AnnotatedTerm, replacement: Term): Term => {\n  if ('step' in t && t.step) {\n    return replacement\n  }\n\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return t\n    case 'fun':\n      const body = replaceStep(t.body, replacement)\n      return t.body === body ? t : Fun(t.param, body)\n    case 'app':\n      const l = replaceStep(t.left, replacement)\n      if (t.left !== l) {\n        return App(l, t.right)\n      }\n      const r = replaceStep(t.right, replacement)\n      return t.right === r ? t : App(l, r)\n  }\n}\n\nconst findSynonyms = (term: Term, defs: Definitions) => {\n  const synonyms = []\n  for (const name in defs) {\n    if (alphaEq(term, defs[name])) {\n      synonyms.push(name)\n    }\n  }\n  return synonyms\n}\n","import freeIn from './free-in'\nimport {\n  Callback,\n  composeAppL,\n  composeAppR,\n  composeFun,\n  markStep\n} from './helpers'\nimport { applySubstitution, renameForSubstitution } from './substitute'\nimport { App, Def, Fun, Term } from './terms'\n\nexport type Options = {\n  strategy: keyof typeof reduceFunctions\n  etaEnabled: boolean\n}\n\nconst reduce = (t: Term, { strategy, etaEnabled }: Options, cb: Callback) => {\n  const reducer = reduceFunctions[strategy]\n  let reduced = reducer(t, cb)\n  if (etaEnabled) {\n    reduced = reduceEta(reduced, cb)\n  }\n  return reduced\n}\n\nexport default reduce\n\ntype Reducer = (t: Term, cb: Callback) => Term\n\nconst reduceCallByName: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n    case 'fun':\n      return t\n    case 'app':\n      const l = reduceCallByName(t.left, composeAppR(cb, t.right))\n      return l.type === 'fun'\n        ? reduceCallByName(apply(l, t.right, cb), cb)\n        : App(l, t.right)\n    case 'def':\n      return reduceCallByName(resolveDefinition(t, cb), cb)\n  }\n}\n\nconst reduceNormal: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      return Fun(t.param, reduceNormal(t.body, composeFun(cb, t.param)))\n    case 'app':\n      let l = reduceCallByName(t.left, composeAppR(cb, t.right))\n      if (l.type === 'fun') {\n        return reduceNormal(apply(l, t.right, cb), cb)\n      } else {\n        l = reduceNormal(l, composeAppR(cb, t.right)) // Finish reducing l.\n        const r = reduceNormal(t.right, composeAppL(cb, l))\n        return App(l, r)\n      }\n    case 'def':\n      return reduceNormal(resolveDefinition(t, cb), cb)\n  }\n}\n\nconst reduceCallByValue: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n    case 'fun':\n      return t\n    case 'app':\n      const l = reduceCallByValue(t.left, composeAppR(cb, t.right))\n      const r = reduceCallByValue(t.right, composeAppL(cb, l))\n      return l.type === 'fun'\n        ? reduceCallByValue(apply(l, r, cb), cb)\n        : App(l, r)\n    case 'def':\n      return reduceCallByValue(resolveDefinition(t, cb), cb)\n  }\n}\n\nconst reduceApplicative: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      return Fun(t.param, reduceApplicative(t.body, composeFun(cb, t.param)))\n    case 'app':\n      let l = reduceCallByValue(t.left, composeAppR(cb, t.right))\n      if (l.type === 'fun') {\n        const r = reduceCallByValue(t.right, composeAppL(cb, l))\n        return reduceApplicative(apply(l, r, cb), cb)\n      } else {\n        l = reduceApplicative(l, composeAppR(cb, t.right))\n        const r = reduceApplicative(t.right, composeAppL(cb, l))\n        return App(l, r)\n      }\n    case 'def':\n      return reduceApplicative(resolveDefinition(t, cb), cb)\n  }\n}\n\nconst apply = (fun: Fun, subst: Term, cb: Callback) => {\n  const renameCb = composeFun(composeAppR(cb, subst), fun.param)\n  const renamedBody = renameForSubstitution(\n    fun.body,\n    fun.param,\n    subst,\n    renameCb\n  )\n  const renamed = App(Fun(fun.param, renamedBody), subst)\n  const applied = applySubstitution(renamedBody, fun.param, subst)\n  cb(markStep({ type: 'beta', before: renamed, after: applied }))\n  return applied\n}\n\n// Performs any available η-reductions on a term.\nconst reduceEta: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      // λx.(F x) = F if x is free in F\n      if (\n        t.body.type === 'app' &&\n        t.body.right.type === 'var' &&\n        t.body.right.name === t.param &&\n        !freeIn(t.param, t.body.left)\n      ) {\n        cb(markStep({ type: 'eta', before: t, after: t.body.left }))\n        return t.body.left\n      } else {\n        return Fun(t.param, reduceEta(t.body, composeFun(cb, t.param)))\n      }\n    case 'app':\n      const l = reduceEta(t.left, composeAppR(cb, t.right))\n      const r = reduceEta(t.right, composeAppR(cb, l))\n      return App(l, r)\n    case 'def':\n      return t\n  }\n}\n\nconst reduceFunctions = {\n  normal: reduceNormal,\n  applicative: reduceApplicative,\n  cbn: reduceCallByName,\n  cbv: reduceCallByValue\n}\n\nconst resolveDefinition = (def: Def, cb: Callback) => {\n  let after = def.term\n  while (after.type === 'def') {\n    after = after.term\n  }\n  cb(markStep({ type: 'def', before: def, after }))\n  return after\n}\n","import freeIn from './free-in'\nimport {\n  Callback,\n  composeAppL,\n  composeAppR,\n  composeFun,\n  markStep\n} from './helpers'\nimport { App, Fun, Term, Var } from './terms'\n\n// Applies the substitution T[x := S]\n// I.e., substitutes the variable x for the term S in the term T.\nexport const substitute = (t: Term, x: string, s: Term): Term => {\n  switch (t.type) {\n    case 'var':\n      // x[x := S] = S\n      // y[x := S] = y\n      return t.name === x ? s : t\n    case 'fun':\n      // (λx.E)[x := S] = λx.E\n      // λx creates a new context for x so no further substitution is needed.\n      if (t.param === x) {\n        return t\n      }\n      // (λy.E)[x := S] with x != y\n      // If y is free in S and x is free in E, then must α-convert λy.E to avoid\n      // name conflicts.\n      if (freeIn(t.param, s) && freeIn(x, t.body)) {\n        // (λy.E)[x := S] = λy'.(E[y := y'][x := S])\n        const newVarName = renameVar(t.param, t.body, s)\n        const renamedBody = applySubstitution(t.body, t.param, Var(newVarName))\n        return Fun(newVarName, substitute(renamedBody, x, s))\n      } else {\n        // (λy.E)[x := S] = λy.(E[x := S])\n        return Fun(t.param, substitute(t.body, x, s))\n      }\n    case 'app':\n      // (U V)[x := S] = (U[x := S]) (V[x := S])\n      return App(substitute(t.left, x, s), substitute(t.right, x, s))\n    case 'def':\n      return t\n  }\n}\n\n// Note: renameForSubstitution() and applySubstitution() are the same as\n// substitute(), only split up into two different steps. We need them that way\n// to be able to do all alpha-renaming steps before each beta-reduction, but it\n// would be nice to have these three functions DRY up a bit.\n\n// Performs the α-conversions necessary for the substitution T[x := S], but does\n// not perform the substitution itself.\n// Records the α-conversions by calling cb.\nexport const renameForSubstitution = (\n  t: Term,\n  x: string,\n  s: Term,\n  cb: Callback\n): Term => {\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return t\n    case 'fun':\n      if (t.param === x) {\n        return t\n      }\n      if (freeIn(t.param, s) && freeIn(x, t.body)) {\n        const newVarName = renameVar(t.param, t.body, s)\n        const renamedBody = applySubstitution(t.body, t.param, Var(newVarName))\n        cb(\n          markStep({\n            type: 'alpha',\n            before: t,\n            after: (t = Fun(newVarName, renamedBody))\n          })\n        )\n      }\n      const body = renameForSubstitution(t.body, x, s, composeFun(cb, t.param))\n      return Fun(t.param, body)\n    case 'app':\n      const l = renameForSubstitution(t.left, x, s, composeAppR(cb, t.right))\n      const r = renameForSubstitution(t.right, x, s, composeAppL(cb, l))\n      return App(l, r)\n  }\n}\n\n// Applies the substitution T[x := S] directly, without doing α-conversions.\nexport const applySubstitution = (t: Term, x: string, s: Term): Term => {\n  switch (t.type) {\n    case 'var':\n      return t.name === x ? s : t\n    case 'fun':\n      return t.param === x ? t : Fun(t.param, applySubstitution(t.body, x, s))\n    case 'app':\n      const l = applySubstitution(t.left, x, s)\n      const r = applySubstitution(t.right, x, s)\n      return App(l, r)\n    case 'def':\n      return t\n  }\n}\n\n// Renames a variable to avoid naming conflicts case doing: a substitution.\nconst renameVar = (oldName: string, t: Term, s: Term) => {\n  // Split the name into base and number part.\n  const base = oldName.replace(/\\d+$/, '')\n  const match = oldName.match(/\\d+$/)\n  let n = match ? parseInt(match[0], 10) : 0\n\n  while (true) {\n    n++\n    const newName = base + n\n    const isValid =\n      // Avoid name collisions with substitution term.\n      !freeIn(newName, s) &&\n      // Avoid name collisions with free variables in body.\n      !freeIn(newName, t) &&\n      // Avoid name collisions with inner functions.\n      !varRenameCollides(t, oldName, newName)\n\n    if (isValid) {\n      return newName\n    }\n  }\n}\n\n// Whether a variable rename collides in a given term. That is, if changing the\n// occurrences of oldName with newName in t would make it change t's meaning\n// (i.e. not be α-equivalent).\nconst varRenameCollides = (\n  t: Term,\n  oldName: string,\n  newName: string\n): boolean => {\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return false\n    case 'fun':\n      // A variable rename collides with this function if the old variable\n      // was free in the function and the new name for the variable is the\n      // same as the param of the function, thus changing old free variable\n      // binding.\n      return (\n        (t.param === newName && freeIn(oldName, t)) ||\n        // Or if the renaming collides in the body of the function.\n        varRenameCollides(t.body, oldName, newName)\n      )\n    case 'app':\n      return (\n        varRenameCollides(t.left, oldName, newName) ||\n        varRenameCollides(t.right, oldName, newName)\n      )\n  }\n}\n","type Var = { type: 'var'; name: string }\ntype Fun = { type: 'fun'; param: string; body: Term }\ntype App = { type: 'app'; left: Term; right: Term }\ntype Def = { type: 'def'; name: string; term: Term }\ntype Term = Var | Fun | App | Def\n\n// Term constructors.\nconst Var = (name: string): Var => ({ type: 'var', name })\nconst Fun = (param: string, body: Term): Fun => ({ type: 'fun', param, body })\nconst App = (left: Term, right: Term): App => ({ type: 'app', left, right })\nconst Def = (name: string, term: Term): Def => ({ type: 'def', name, term })\n\nexport { Term, Var, Fun, App, Def }\n","let logTimings = false\n\nexport const timed =\n  <Args extends unknown[], R>(name: string, fn: (...args: Args) => R) =>\n  (...args: Args) => {\n    if (logTimings) {\n      console.time(name)\n    }\n    const res = fn(...args)\n    if (logTimings) {\n      console.timeEnd(name)\n    }\n    return res\n  }\n\nexport const enableLogTimings = () => {\n  logTimings = true\n}\nexport const disableLogTimings = () => {\n  logTimings = false\n}\n\nexport const identity = <T>(x: T) => x\n\n// Note: it would be nice to replace this overly-clever function with\n// String.dedent() once it gets standardized. See https://github.com/tc39/proposal-string-dedent\nexport const dedent = (str: string) => {\n  const match = str.match(/^[ \\t]*(?=\\S)/gm)\n  if (!match) {\n    return str\n  }\n\n  const indent = Math.min(...match.map(x => x.length))\n  const re = new RegExp(`^[ \\\\t]{${indent}}`, 'gm')\n  const unindented = indent > 0 ? str.replace(re, '') : str\n\n  return unindented.trim()\n}\n\nexport const collapseWhitespace = (str: string) => str.replace(/\\s+/gm, ' ')\n"],"mappings":"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"}