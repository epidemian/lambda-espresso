{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.ts","src/dom.ts","src/examples.ts","src/lambda/alpha-eq.ts","src/lambda/format.ts","src/lambda/free-in.ts","src/lambda/grammar.js","src/lambda/helpers.ts","src/lambda/index.ts","src/lambda/parse.ts","src/lambda/reduce-program.ts","src/lambda/reduce.ts","src/lambda/substitute.ts","src/lambda/terms.ts","src/utils.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","dom_1","examples_1","__importDefault","lambda_1","utils_1","enableLogTimings","input","$","output","document","addEventListener","keyCode","ctrlKey","run","value","replace","start","selectionStart","end","selectionEnd","_","renderTerm","term","className","renderArrow","symbol","label","arrowSymbols","alpha","beta","eta","def","renderSynonyms","synonyms","join","getOptions","maxReductionSteps","parseInt","strategy","etaEnabled","checked","reductions","reduceProgram","renderReductions","err","textContent","message","classList","add","timed","innerHTML","map","renderCollapsedReduction","remove","delegate","element","reduction","nodeIndex","totalSteps","expanded","querySelector","collapsed","toggle","renderExpandedReductionForm","prev","previousElementSibling","renderCollapsedReductionForm","initial","arrow","final","reductionSteps","finalSynonyms","steps","step","renderStep","renderStepOptions","before","after","arrowSymbol","type","arrowLabel","lastStep","push","highlightStep","s","highlightFormerTerm","highlightSubstitutionTerm","dedent","focus","examplesMenu","examplesHtml","default","example","href","encodeURI","name","event","preventDefault","scrollTop","examplesDropdown","contains","stopPropagation","once","location","hash","updateInputFromHash","decodeURI","codeStart","indexOf","slice","window","eventType","selector","handler","target","Element","closest","Array","prototype","parentNode","childNodes","examples","substitute_1","terms_1","alphaEq","t1","t2","left","right","param","body","substitute","Var","format","appParens","funParens","highlight","h","identity","highlightVar","lambda","funStr","lStr","rStr","appStr","freeIn","x","grammar","k","v","l","$V0","$V1","$V2","$V3","$V4","$V5","parser","trace","yy","symbols_","error","root","program","EOF","line","SEPARATOR","ident","=","LAMBDA",".","(",")","IDENT","$accept","$end","terminals_","2","5","7","10","11","12","13","14","15","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","this","parseTopLevelTerm","parseDefinition","parseFunction","parseApplication","parseIdentifier","table","3","4","6","8","9","defaultActions","parseError","str","recoverable","parse","self","stack","tstack","vstack","lstack","recovering","TERROR","args","arguments","lexer","Object","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","popStack","_token_stack","lex","token","preErrorSymbol","state","action","yyval","len","newState","expected","errStr","showPosition","text","match","loc","first_line","last_line","first_column","last_column","range","apply","concat","openParens","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","INITIAL","inclusive","Parser","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","argv","composeFun","fn","b","Fun","composeAppL","App","composeAppR","markStep","assign","__export","parse_1","format_1","reduce_program_1","grammar_1","defs","terms","forEach","resolveTermRefs","refNames","keys","resolveDefRefs","boundNames","free","defName","bound","checkForCircularRefs","collapseWhitespace","boundOnBody","refName","path","circularNote","nextRefs","nextRef","alpha_eq_1","reduce_1","reduceTerm","enough","terminates","stepTerm","findStep","last","findSynonyms","expandStep","highlightFunctionVar","fun","hs","ha","beforeStr","replaceStep","afterStr","hx","ht","replacement","free_in_1","helpers_1","reduce","cb","reducer","reduceFunctions","reduced","reduceEta","reduceCallByName","reduceNormal","reduceCallByValue","reduceApplicative","subst","renameCb","renamedBody","renameForSubstitution","renamed","applied","applySubstitution","normal","applicative","cbn","cbv","newVarName","renameVar","oldName","base","newName","isValid","varRenameCollides","Def","logTimings","time","res","timeEnd","disableLogTimings","indent","min","re","RegExp","unindented","trim"],"mappings":"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","sourceRoot":".","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Script for index.html\nimport { $, delegate, nodeIndex } from './dom'\nimport examples from './examples'\nimport { Options, reduceProgram, Reduction } from './lambda'\nimport { dedent, enableLogTimings, timed } from './utils'\n\nenableLogTimings()\n\nconst input = $('.input') as HTMLInputElement\nconst output = $('.output')\n\n// Run code on ctrl+enter.\ndocument.addEventListener('keyup', e => {\n  if (e.keyCode === 13 && e.ctrlKey) {\n    run()\n  }\n})\n\ninput.addEventListener('keyup', () => {\n  // Replace every \"\\\" with \"Î»\" while typing.\n  let code = input.value\n  code = code.replace(/\\\\/g, 'Î»')\n  // Preserve selection\n  const start = input.selectionStart\n  const end = input.selectionEnd\n  input.value = code\n  input.selectionStart = start\n  input.selectionEnd = end\n})\n\n$('.run').addEventListener('click', _ => run())\n\nconst renderTerm = (term: string, className = '') =>\n  `<span class=\"term ${className}\">${term}</span>`\n\nconst renderArrow = (symbol: string, label: string) =>\n  `<span class=arrow>${symbol}<small>${label}</small></span>`\n\nconst arrowSymbols = {\n  alpha: 'Î±',\n  beta: 'Î²',\n  eta: 'Î·',\n  def: ''\n}\n\nconst renderSynonyms = (synonyms: string[]) =>\n  synonyms.length ? `<span class=synonyms>(${synonyms.join(', ')})</span>` : ''\n\nconst getOptions = (): Options => {\n  const maxReductionSteps = parseInt(\n    $<HTMLInputElement>('input[name=max-steps]').value || '0',\n    10\n  )\n  const strategy = $<HTMLInputElement>('input[name=strategy]:checked')\n    .value as Options['strategy']\n  const etaEnabled = $<HTMLInputElement>('[name=eta-reductions]').checked\n  return { maxReductionSteps, strategy, etaEnabled }\n}\n\nlet reductions: Reduction[] = []\nconst run = () => {\n  const code = input.value\n  try {\n    reductions = reduceProgram(code, getOptions())\n    renderReductions()\n  } catch (err) {\n    output.textContent = err.message\n    output.classList.add('error')\n  }\n}\n\nconst renderReductions = timed('render html', () => {\n  output.innerHTML = reductions.map(renderCollapsedReduction).join('')\n  output.classList.remove('error')\n})\n\ndelegate('click', output, '.reduction', element => {\n  const reduction = reductions[nodeIndex(element)]\n  if (reduction.totalSteps === 0) {\n    return\n  }\n  const expanded = element.querySelector('.expanded')\n  const collapsed = element.querySelector('.collapsed')\n  if (expanded) {\n    expanded.classList.toggle('hidden')\n    collapsed!.classList.toggle('hidden')\n  } else {\n    collapsed!.classList.add('hidden')\n    element.innerHTML += renderExpandedReductionForm(reduction)\n  }\n})\n\ndelegate('mouseover', output, '.expanded .step', element => {\n  element.classList.add('highlight')\n  // Hide the previous step's after term.\n  const prev = element.previousElementSibling\n  if (prev) {\n    prev.querySelector('.after')!.classList.add('hidden')\n  }\n})\n\ndelegate('mouseout', output, '.expanded .step', element => {\n  element.classList.remove('highlight')\n  const prev = element.previousElementSibling\n  if (prev) {\n    prev.querySelector('.after')!.classList.remove('hidden')\n  }\n})\n\nconst renderCollapsedReduction = (reduction: Reduction) =>\n  `<div class=reduction>${renderCollapsedReductionForm(reduction)}</div>`\n\nconst renderCollapsedReductionForm = (reduction: Reduction) => {\n  const initial = renderTerm(reduction.initial)\n  let arrow = ''\n  let final = ''\n  if (reduction.reductionSteps > 0) {\n    arrow = renderArrow('â', `(${reduction.reductionSteps})`)\n    final = renderTerm(reduction.final)\n  }\n  const synonyms = renderSynonyms(reduction.finalSynonyms)\n  return `<div class=collapsed>${initial} ${arrow} ${final} ${synonyms}</div>`\n}\n\nconst renderExpandedReductionForm = (reduction: Reduction) => {\n  const steps = []\n  for (let i = 0; i < reduction.totalSteps; i++) {\n    const step = reduction.renderStep(i, renderStepOptions)\n    const before = renderTerm(step.before, 'before')\n    const after = renderTerm(step.after, 'after')\n    const arrowSymbol = step.type === 'def' ? 'â¡' : 'â'\n    const arrowLabel = arrowSymbols[step.type]\n    const arrow = renderArrow(arrowSymbol, arrowLabel)\n    const lastStep = i === reduction.totalSteps - 1\n    const synonyms = lastStep ? renderSynonyms(reduction.finalSynonyms) : ''\n    steps.push(\n      `<span class=step>${before}<br>${arrow} ${after} ${synonyms}</span>`\n    )\n  }\n\n  return `<div class=expanded>${steps.join('')}</div>`\n}\n\nconst renderStepOptions = {\n  highlightStep: (s: string) => `<span class=match>${s}</span>`,\n  highlightFormerTerm: (s: string) => `<span class=former-term>${s}</span>`,\n  highlightSubstitutionTerm: (s: string) => `<span class=subst-term>${s}</span>`\n}\n\ninput.value = dedent(`\n  ; Write some Î»-expressions here and hit Run. Use \"\\\\\" to enter \"Î»\" ;)\n  (Î»x.Î»y.Î»z.z y x) a b c\n`)\ninput.focus()\n\nconst examplesMenu = $('.examples-menu')\nconst examplesHtml = examples.map((example, i) => {\n  const href = encodeURI(`#>${example.code}`)\n  return `<li><a href=\"${href}\">${i} - ${example.name}</a></li>`\n})\n\nexamplesMenu.innerHTML = examplesHtml.join('')\ndelegate('click', examplesMenu, 'li', (element, event) => {\n  event.preventDefault() // Don't change the location.hash\n  input.value = examples[nodeIndex(element)].code\n  input.scrollTop = 0\n})\n\nconst examplesDropdown = $('.examples-dropdown')\nexamplesDropdown.addEventListener('click', e => {\n  if (examplesDropdown.classList.contains('active')) {\n    return\n  }\n  e.stopPropagation()\n  examplesDropdown.classList.add('active')\n  document.addEventListener(\n    'click',\n    () => {\n      examplesDropdown.classList.remove('active')\n    },\n    { once: true }\n  )\n})\n\n$('button.link').addEventListener('click', () => {\n  const code = input.value\n  location.hash = `>${code}`\n})\n\nconst updateInputFromHash = () => {\n  const hash = decodeURI(location.hash)\n  const codeStart = hash.indexOf('>')\n  if (codeStart >= 0) {\n    input.value = hash.slice(codeStart + 1)\n  }\n}\n\nwindow.addEventListener('hashchange', updateInputFromHash)\nupdateInputFromHash()\n","export const $ = <T extends Element>(s: string) =>\n  document.querySelector(s) as T\n\n// Similar to jQuery.fn.on(type, selector, handler)\nexport const delegate = (\n  eventType: string,\n  element: Element,\n  selector: string,\n  handler: (el: Element, ev: Event) => void\n) => {\n  element.addEventListener(eventType, event => {\n    if (event.target instanceof Element) {\n      const closest = event.target.closest(selector)\n      if (closest && element.contains(closest)) {\n        handler(closest, event)\n      }\n    }\n  })\n}\n\nexport const nodeIndex = (element: Element): number => {\n  return Array.prototype.indexOf.call(element.parentNode!.childNodes, element)\n}\n","import { dedent } from './utils'\n\nconst examples = [\n  {\n    name: 'Basics',\n    code: dedent(`\n    ; This example is not intend to be a tutorial nor an introduction to Î» Calculus.\n    ; You should check http://en.wikipedia.org/wiki/Lambda_calculus for that :)\n    ; As you can see, these are comments. You can run this example clicking the Run\n    ; button below or pressing Ctrl+Enter.\n    ; So, the three basic types of Î» expressions are:\n    ; Variables:\n    x\n    ; Applications:\n    x y\n    ; And lambda abstractions (also known as functions):\n    Î»x.x\n    ; If the left-side of an application is an abstraction, then a reduction takes place:\n    (Î»x.x) y\n    ; That little abstraction at the left is the identity, a very simple function that\n    ; just reduces to whatever you apply to it. We can give it a name like so:\n    id = Î»x.x\n    ; And then just refer it by that name:\n    id a\n    ; You can apply any kind of Î» expression to an abstraction, like another function:\n    id Î»b.c\n    ; Or an application:\n    id (x y)\n    ; Or even the identity function itself:\n    id id\n    ; That means you can apply identity to itself as many times as you want and it'll still\n    ; be identity:\n    id id id id id\n    ; Notice that applications are left-associative, so the line above is equivalent to:\n    ((((id id) id) id) id)\n\n    ; TODO: explain applicative and normal order...\n  `)\n  },\n  {\n    name: 'Booleans',\n    code: dedent(`\n    ; Church booleans\n\n    ; The booleans and their operations can be encoded as the following Î»-terms:\n    true = Î»t.Î»f.t\n    false = Î»t.Î»f.f\n    not = Î»p.p false true\n    and = Î»p.Î»q.p q p\n    or = Î»p.Î»q.p p q\n    if = Î»p.p\n\n    ; Print truth tables for not, and and or:\n    not true\n    not false\n    and false false\n    and false true\n    and true false\n    and true true\n    or false false\n    or false true\n    or true false\n    or true true\n\n    ; Terms can be nested as much as we want:\n    if (not (not true)) (or false (if true true false)) false\n\n    ; There's nothing special about \"operators\", we can treat them as any other value:\n    (if false or and) true false\n  `)\n  },\n  {\n    name: 'Numbers',\n    code: dedent(`\n    ; Church numerals\n\n    ; The first few numbers are:\n    zero = Î»s.Î»z.z\n    one = Î»s.Î»z.s z\n    two = Î»s.Î»z.s (s z)\n    three = Î»s.Î»z.s (s (s z))\n    ; In general, any natural number n can be encoded as:\n    ; N = Î»s.Î»z.s (s (s ... (s (s z)) ... ))\n    ; with s applied n times.\n\n    ; When we get tired of writing numbers like that, we can define a successor function:\n    succ = Î»n.Î»s.Î»z.s (n s z)\n    succ three\n\n    ; We can think of Church numerals as functions that apply a given function s to a\n    ; given value z a number of times. Zero will apply it 0 times (i.e. it'll give\n    ; us z back untouched) and three will call it 3 times.\n    ; So, we can represent the addition of numbers m and n as first applying n times s to z,\n    ; and then applying m times s to that:\n    add = Î»m.Î»n.Î»s.Î»z.m s (n s z)\n    add two three\n    ; ...or, more succinctly, as applying n times the successor function on m (or vice versa):\n    add' = Î»m.Î»n.n succ m\n    add' two three\n    ; Conversely, we could define the successor function as adding one:\n    succ' = add one\n    succ' three\n\n    ; Multiplication of m by n is applying m times a function that applies s n times:\n    mult = Î»m.Î»n.Î»s.m (n s)\n    mult three three\n    ; ...or applying m times the addition of n to zero:\n    mult' = Î»m.Î»n.m (add n) zero\n    mult' three three\n\n    ; Exponentiation n^m has a simple encoding: applying the base m to the exponent n,\n    ; which can be understood as applying m successively n times:\n    exp = Î»m.Î»n.n m\n    exp two three\n    ; ...or, alternatively, applying m times the multiplication by n to one:\n    exp' = Î»m.Î»n.m (mult n) one\n    exp' two three\n\n    ; The encoding for the predecessor function is quite complex.\n    ; The Wikipedia article on Church encoding has a good explanation for this term ;-)\n    pred = Î»n.Î»s.Î»z.n (Î»f.Î»g.g (f s)) (Î»x.z) (Î»x.x)\n    pred three\n\n    ; But given the predecessor function is then easy to define the subtraction:\n    sub = Î»m.Î»n.n pred m\n    sub three two\n\n    ; To build some predicate functions, we'll use some known boolean terms (see\n    ; Booleans example for more info):\n    true = Î»t.Î»f.t\n    false = Î»t.Î»f.f\n    and = Î»p.Î»q.p q p\n\n    ; To know if a number n is zero we can pass true as the base value and a function\n    ; that always returns false (note that the \"?\" is no special syntax; it's just\n    ; part of the name of the predicate):\n    zero? = Î»n.n (Î»x.false) true\n    zero? zero\n    zero? two\n\n    ; To know if a number is less or equal to another number, we can subtract them and\n    ; see if the result is zero:\n    leq = Î»m.Î»n.zero? (sub m n)\n\n    ; And given that predicate, numeric equality between m and n can be defined as:\n    eq = Î»m.Î»n.and (leq m n) (leq n m)\n\n    ; Throwing everything into the mix, we can prove that 2Â³ = 3Â² - 1:\n    eq (exp two three) (pred (exp three two))\n  `)\n  },\n  {\n    name: 'Factorial',\n    code: dedent(`\n    ; Factorial function and recursion\n\n    ; Note: for this example we'll use boolean and numeric terms from previous\n    ; examples (see below).\n    ; Also not that these factorial definitions won't work with applicative order ;)\n\n    ; We'd like to be able to define a factorial function as:\n    ; fact = Î»n.if (zero? n) one (mult n (fact (pred n)))\n    ; But we can't use a term in its own definition.\n    ; To achieve recursion, we can instead define a function that will receive itself\n    ; as a parameter r, and then recur by calling r with itself and n - 1:\n    fact-rec = Î»r.Î»n.if (zero? n) one (mult n (r r (pred n)))\n    ; The real factorial function would then be:\n    fact = fact-rec fact-rec\n    fact four\n\n    ; Another way to recur is to use a general purpose fixed-point combinator.\n    ; Behold, the almighty Y Combinator:\n    Y = Î»f.(Î»x.f (x x)) (Î»x.f (x x))\n    ; And then there's no need to define a separate function:\n    fact2 = Y Î»r.Î»n.if (zero? n) one (mult n (r (pred n)))\n    fact2 four\n\n    ; A different way of computing the factorial of n is to use the number n itself\n    ; as a function that will call a given function n times, starting with a given value.\n    ; The function given will take a pair [a, b] and return a new pair [a-1, a*b], and start with [n, 1].\n    ; After applying this given function n times, the resulting pair will be [0, factorial(n)],\n    ; of which we take the 2nd component.\n    ; This way of defining factorial requires much fewer reduction steps.\n    fact3 = Î»n.2nd (n (Î»p.pair (pred (1st p)) (mult (1st p) (2nd p))) (pair n one))\n    fact3 four\n\n    ; Yet another way of defining factorial is as the successive multiplication of the numbers n...1,\n    ; which results in this very elegant solution:\n    fact4 = Î»n.reduce mult (iota n) one\n    fact4 four\n\n    ; Pair-handling functions:\n    pair = Î»x.Î»y.Î»f.f x y\n    1st = Î»p.p (Î»x.Î»y.x)\n    2nd = Î»p.p (Î»x.Î»y.y)\n\n    ; List-handling functions. Lists can be considered functions handling a nil (empty) case\n    ; and a cons (head+tail) case:\n    nil = Î»n.Î»c.n\n    cons = Î»h.Î»t.Î»n.Î»c.c h t\n    reduce = Y Î»r.Î»f.Î»list.Î»initial.list initial (Î»h.Î»t.f h (r f t initial))\n    ; For a given number n, iota produces the list of numbers 1, 2, ..., n\n    iota = Î»n.n (Î»list.list (cons n nil) (Î»h.Î»t.cons (pred h) list)) nil\n\n    ; Borrow some terms from previous examples:\n    true = Î»t.Î»f.t\n    false = Î»t.Î»f.f\n    if = Î»p.p\n    zero = Î»s.Î»z.z\n    one = Î»s.Î»z.s z\n    two = Î»s.Î»z.s (s z)\n    three = Î»s.Î»z.s (s (s z))\n    four = Î»s.Î»z.s (s (s (s z)))\n    succ = Î»n.Î»s.Î»z.s (n s z)\n    pred = Î»n.Î»s.Î»z.n (Î»f.Î»g.g (f s)) (Î»x.z) (Î»x.x)\n    mult = Î»m.Î»n.Î»s.m (n s)\n    zero? = Î»n.n (Î»x.false) true\n  `)\n  },\n  {\n    name: 'Extras',\n    code: dedent(`\n    ; Syntactic Trivia and Miscellaneous\n\n    ; Identifiers can contain basically any character (except the few ones reserved for\n    ; syntax: \"Î»\", \".\", \"=\", \"(\" and \")\").\n    ; This means you can write some pretty code-looking lambda terms!\n    0 = Î»s.Î»z.z\n    1 = Î»s.Î»z.s z\n    2 = Î»s.Î»z.s (s z)\n    + = Î»m.Î»n.Î»s.Î»z.m s (n s z)\n    * = Î»m.Î»n.Î»s.m (n s)\n    (+ (* 2 1) 0)\n    ; Reinventing (a part of) Lisp is always fun...\n\n    ; You can even use emojis as identifiers! But make sure to use this power responsibly.\n    (Î»ð´.â) ð\n\n    ; Although line breaks usually act as separators between terms/definitions,\n    ; you can use parentheses to split a complex term into multiple lines:\n    fib = Y Î»f.Î»n.(\n      if (â¤ n 1)\n         n\n         (+ (f (- n 1))\n            (f (- n 2))))\n    fib 0\n    fib 1\n    fib 2\n    fib 7\n\n    ; The rest of the definitions to make the above code work. Not much to see here...\n    Y = Î»f.(Î»x.f (x x)) (Î»x.f (x x))\n    - = Î»m.Î»n.n pred m\n    â¤ = Î»m.Î»n.zero? (- m n)\n    pred = Î»n.Î»s.Î»z.n (Î»f.Î»g.g (f s)) (Î»x.z) (Î»x.x)\n    zero? = Î»n.n (Î»x.false) true\n    true = Î»t.Î»f.t\n    false = Î»t.Î»f.f\n    if = Î»p.p\n    7 = Î»s.Î»z.s (s (s (s (s (s (s z))))))\n    13 = Î»s.Î»z.s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))\n    â = Î»ð©.ð© ð© ð©\n  `)\n  }\n]\n\nexport default examples\n","import { substitute } from './substitute'\nimport { Term, Var } from './terms'\n\n// Whether two terms are alpha-equivalent.\nconst alphaEq = (t1: Term, t2: Term): boolean => {\n  if (t1.type === 'def') {\n    return alphaEq(t1.term, t2)\n  }\n  if (t2.type === 'def') {\n    return alphaEq(t1, t2.term)\n  }\n  if (t1.type === 'var' && t2.type === 'var') {\n    return t1.name === t2.name\n  }\n  if (t1.type === 'app' && t2.type === 'app') {\n    return alphaEq(t1.left, t2.left) && alphaEq(t1.right, t2.right)\n  }\n  if (t1.type === 'fun' && t2.type === 'fun') {\n    if (t1.param === t2.param) {\n      return alphaEq(t1.body, t2.body)\n    } else {\n      return alphaEq(t1.body, substitute(t2.body, t2.param, Var(t1.param)))\n    }\n  }\n  return false\n}\n\nexport default alphaEq\n","import { identity } from '../utils'\nimport { Term } from './terms'\n\n// Returns the string representation for a given term t.\nconst format = (t: Term, appParens = false, funParens = false): string => {\n  // TODO: Remove highlighting hack of storing data on terms.\n  const { highlight: h = identity, highlightVar } = t as any\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return h(t.name)\n    case 'fun':\n      let lambda = `Î»${t.param}`\n      if (highlightVar) {\n        lambda = highlightVar(lambda)\n      }\n      const funStr = `${lambda}.${format(t.body)}`\n      return h(funParens ? `(${funStr})` : funStr)\n    case 'app':\n      const lStr = format(t.left, false, true)\n      const rStr = format(t.right, true, funParens)\n      const appStr = `${lStr} ${rStr}`\n      return h(appParens ? `(${appStr})` : appStr)\n  }\n}\n\nexport default format\n","import { Term } from './terms'\n\n// Whether the variable x appears free in the term t.\nconst freeIn = (x: string, t: Term): boolean => {\n  switch (t.type) {\n    case 'var':\n      return t.name === x\n    case 'fun':\n      return t.param !== x && freeIn(x, t.body)\n    case 'app':\n      return freeIn(x, t.left) || freeIn(x, t.right)\n    case 'def':\n      // Definitions don't have free variables.\n      return false\n  }\n}\n\nexport default freeIn\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar grammar = (function() {\n  var o = function(k, v, o, l) {\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n      return o\n    },\n    $V0 = [5, 7],\n    $V1 = [1, 6],\n    $V2 = [1, 7],\n    $V3 = [1, 8],\n    $V4 = [2, 10],\n    $V5 = [5, 7, 11, 13, 14, 15]\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      error: 2,\n      root: 3,\n      program: 4,\n      EOF: 5,\n      line: 6,\n      SEPARATOR: 7,\n      term: 8,\n      ident: 9,\n      '=': 10,\n      LAMBDA: 11,\n      '.': 12,\n      '(': 13,\n      ')': 14,\n      IDENT: 15,\n      $accept: 0,\n      $end: 1\n    },\n    terminals_: {\n      2: 'error',\n      5: 'EOF',\n      7: 'SEPARATOR',\n      10: '=',\n      11: 'LAMBDA',\n      12: '.',\n      13: '(',\n      14: ')',\n      15: 'IDENT'\n    },\n    productions_: [\n      0,\n      [3, 2],\n      [4, 0],\n      [4, 1],\n      [4, 2],\n      [4, 3],\n      [6, 1],\n      [6, 3],\n      [8, 4],\n      [8, 2],\n      [8, 1],\n      [8, 3],\n      [9, 1]\n    ],\n    performAction: function anonymous(\n      yytext,\n      yyleng,\n      yylineno,\n      yy,\n      yystate /* action[1] */,\n      $$ /* vstack */,\n      _$ /* lstack */\n    ) {\n      /* this == yyval */\n\n      var $0 = $$.length - 1\n      switch (yystate) {\n        case 1:\n          /* do nothing; terms and definitions already collected */\n\n          break\n        case 6:\n          this.$ = yy.parseTopLevelTerm($$[$0])\n          break\n        case 7:\n          this.$ = yy.parseDefinition($$[$0 - 2], $$[$0])\n          break\n        case 8:\n          this.$ = yy.parseFunction($$[$0 - 2], $$[$0])\n          break\n        case 9:\n          this.$ = yy.parseApplication($$[$0 - 1], $$[$0])\n          break\n        case 10:\n          this.$ = yy.parseIdentifier($$[$0])\n          break\n        case 11:\n          this.$ = $$[$0 - 1]\n          break\n        case 12:\n          this.$ = yytext\n          break\n      }\n    },\n    table: [\n      o($V0, [2, 2], {\n        3: 1,\n        4: 2,\n        6: 3,\n        8: 4,\n        9: 5,\n        11: $V1,\n        13: $V2,\n        15: $V3\n      }),\n      { 1: [3] },\n      { 5: [1, 9], 7: [1, 10] },\n      o($V0, [2, 3]),\n      o($V0, [2, 6], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 }),\n      o([5, 7, 11, 13, 15], $V4, { 10: [1, 13] }),\n      { 9: 14, 15: $V3 },\n      { 8: 15, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      o([5, 7, 10, 11, 12, 13, 14, 15], [2, 12]),\n      { 1: [2, 1] },\n      o($V0, [2, 4], { 8: 4, 9: 5, 6: 16, 11: $V1, 13: $V2, 15: $V3 }),\n      o($V5, [2, 9], { 8: 11, 9: 12 }),\n      o($V5, $V4),\n      { 8: 17, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      { 12: [1, 18] },\n      { 8: 11, 9: 12, 11: $V1, 13: $V2, 14: [1, 19], 15: $V3 },\n      o($V0, [2, 5]),\n      o($V0, [2, 7], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 }),\n      { 8: 20, 9: 12, 11: $V1, 13: $V2, 15: $V3 },\n      o($V5, [2, 11]),\n      o([5, 7, 14], [2, 8], { 8: 11, 9: 12, 11: $V1, 13: $V2, 15: $V3 })\n    ],\n    defaultActions: { 9: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str)\n      } else {\n        var error = new Error(str)\n        error.hash = hash\n        throw error\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1\n      var args = lstack.slice.call(arguments, 1)\n      var lexer = Object.create(this.lexer)\n      var sharedState = { yy: {} }\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k]\n        }\n      }\n      lexer.setInput(input, sharedState.yy)\n      sharedState.yy.lexer = lexer\n      sharedState.yy.parser = this\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {}\n      }\n      var yyloc = lexer.yylloc\n      lstack.push(yyloc)\n      var ranges = lexer.options && lexer.options.ranges\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError\n      }\n      function popStack(n) {\n        stack.length = stack.length - 2 * n\n        vstack.length = vstack.length - n\n        lstack.length = lstack.length - n\n      }\n      _token_stack: var lex = function() {\n        var token\n        token = lexer.lex() || EOF\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token\n        }\n        return token\n      }\n      var symbol,\n        preErrorSymbol,\n        state,\n        action,\n        a,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected\n      while (true) {\n        state = stack[stack.length - 1]\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state]\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex()\n          }\n          action = table[state] && table[state][symbol]\n        }\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = ''\n          expected = []\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\")\n            }\n          }\n          if (lexer.showPosition) {\n            errStr =\n              'Parse error on line ' +\n              (yylineno + 1) +\n              ':\\n' +\n              lexer.showPosition() +\n              '\\nExpecting ' +\n              expected.join(', ') +\n              \", got '\" +\n              (this.terminals_[symbol] || symbol) +\n              \"'\"\n          } else {\n            errStr =\n              'Parse error on line ' +\n              (yylineno + 1) +\n              ': Unexpected ' +\n              (symbol == EOF\n                ? 'end of input'\n                : \"'\" + (this.terminals_[symbol] || symbol) + \"'\")\n          }\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          })\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\n            'Parse Error: multiple actions possible at state: ' +\n              state +\n              ', token: ' +\n              symbol\n          )\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol)\n            vstack.push(lexer.yytext)\n            lstack.push(lexer.yylloc)\n            stack.push(action[1])\n            symbol = null\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng\n              yytext = lexer.yytext\n              yylineno = lexer.yylineno\n              yyloc = lexer.yylloc\n              if (recovering > 0) {\n                recovering--\n              }\n            } else {\n              symbol = preErrorSymbol\n              preErrorSymbol = null\n            }\n            break\n          case 2:\n            len = this.productions_[action[1]][1]\n            yyval.$ = vstack[vstack.length - len]\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            }\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ]\n            }\n            r = this.performAction.apply(\n              yyval,\n              [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n              ].concat(args)\n            )\n            if (typeof r !== 'undefined') {\n              return r\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2)\n              vstack = vstack.slice(0, -1 * len)\n              lstack = lstack.slice(0, -1 * len)\n            }\n            stack.push(this.productions_[action[1]][0])\n            vstack.push(yyval.$)\n            lstack.push(yyval._$)\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]]\n            stack.push(newState)\n            break\n          case 3:\n            return true\n        }\n      }\n      return true\n    }\n  }\n  var openParens = 0 /* generated by jison-lex 0.3.4 */\n  var lexer = (function() {\n    var lexer = {\n      EOF: 1,\n\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash)\n        } else {\n          throw new Error(str)\n        }\n      },\n\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {}\n        this._input = input\n        this._more = this._backtrack = this.done = false\n        this.yylineno = this.yyleng = 0\n        this.yytext = this.matched = this.match = ''\n        this.conditionStack = ['INITIAL']\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        }\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0]\n        }\n        this.offset = 0\n        return this\n      },\n\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0]\n        this.yytext += ch\n        this.yyleng++\n        this.offset++\n        this.match += ch\n        this.matched += ch\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g)\n        if (lines) {\n          this.yylineno++\n          this.yylloc.last_line++\n        } else {\n          this.yylloc.last_column++\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++\n        }\n\n        this._input = this._input.slice(1)\n        return ch\n      },\n\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g)\n\n        this._input = ch + this._input\n        this.yytext = this.yytext.substr(0, this.yytext.length - len)\n        //this.yyleng -= len;\n        this.offset -= len\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g)\n        this.match = this.match.substr(0, this.match.length - 1)\n        this.matched = this.matched.substr(0, this.matched.length - 1)\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1\n        }\n        var r = this.yylloc.range\n\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines\n            ? (lines.length === oldLines.length\n                ? this.yylloc.first_column\n                : 0) +\n              oldLines[oldLines.length - lines.length].length -\n              lines[0].length\n            : this.yylloc.first_column - len\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len]\n        }\n        this.yyleng = this.yytext.length\n        return this\n      },\n\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true\n        return this\n      },\n\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true\n        } else {\n          return this.parseError(\n            'Lexical error on line ' +\n              (this.yylineno + 1) +\n              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' +\n              this.showPosition(),\n            {\n              text: '',\n              token: null,\n              line: this.yylineno\n            }\n          )\n        }\n        return this\n      },\n\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n))\n      },\n\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(\n          0,\n          this.matched.length - this.match.length\n        )\n        return (\n          (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, '')\n        )\n      },\n\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length)\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(\n          /\\n/g,\n          ''\n        )\n      },\n\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput()\n        var c = new Array(pre.length + 1).join('-')\n        return pre + this.upcomingInput() + '\\n' + c + '^'\n      },\n\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          }\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0)\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g)\n        if (lines) {\n          this.yylineno += lines.length\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines\n            ? lines[lines.length - 1].length -\n              lines[lines.length - 1].match(/\\r?\\n?/)[0].length\n            : this.yylloc.last_column + match[0].length\n        }\n        this.yytext += match[0]\n        this.match += match[0]\n        this.matches = match\n        this.yyleng = this.yytext.length\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, (this.offset += this.yyleng)]\n        }\n        this._more = false\n        this._backtrack = false\n        this._input = this._input.slice(match[0].length)\n        this.matched += match[0]\n        token = this.performAction.call(\n          this,\n          this.yy,\n          this,\n          indexed_rule,\n          this.conditionStack[this.conditionStack.length - 1]\n        )\n        if (this.done && this._input) {\n          this.done = false\n        }\n        if (token) {\n          return token\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k]\n          }\n          return false // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false\n      },\n\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF\n        }\n        if (!this._input) {\n          this.done = true\n        }\n\n        var token, match, tempMatch, index\n        if (!this._more) {\n          this.yytext = ''\n          this.match = ''\n        }\n        var rules = this._currentRules()\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]])\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch\n            index = i\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i])\n              if (token !== false) {\n                return token\n              } else if (this._backtrack) {\n                match = false\n                continue // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false\n              }\n            } else if (!this.options.flex) {\n              break\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index])\n          if (token !== false) {\n            return token\n          }\n          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n          return false\n        }\n        if (this._input === '') {\n          return this.EOF\n        } else {\n          return this.parseError(\n            'Lexical error on line ' +\n              (this.yylineno + 1) +\n              '. Unrecognized text.\\n' +\n              this.showPosition(),\n            {\n              text: '',\n              token: null,\n              line: this.yylineno\n            }\n          )\n        }\n      },\n\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next()\n        if (r) {\n          return r\n        } else {\n          return this.lex()\n        }\n      },\n\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition)\n      },\n\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1\n        if (n > 0) {\n          return this.conditionStack.pop()\n        } else {\n          return this.conditionStack[0]\n        }\n      },\n\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (\n          this.conditionStack.length &&\n          this.conditionStack[this.conditionStack.length - 1]\n        ) {\n          return this.conditions[\n            this.conditionStack[this.conditionStack.length - 1]\n          ].rules\n        } else {\n          return this.conditions['INITIAL'].rules\n        }\n      },\n\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0)\n        if (n >= 0) {\n          return this.conditionStack[n]\n        } else {\n          return 'INITIAL'\n        }\n      },\n\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition)\n      },\n\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length\n      },\n      options: {},\n      performAction: function anonymous(\n        yy,\n        yy_,\n        $avoiding_name_collisions,\n        YY_START\n      ) {\n        var YYSTATE = YY_START\n        switch ($avoiding_name_collisions) {\n          case 0:\n            openParens++\n            return 13\n            break\n          case 1:\n            openParens--\n            return 14\n            break\n          case 2:\n            return 11\n            break\n          case 3:\n            return 12\n            break\n          case 4:\n            return 10\n            break\n          case 5 /* ignore separators inside parens */:\n            if (openParens <= 0) return 7\n\n            break\n          case 6 /* ignore whitespace */:\n            break\n          case 7 /* ignore line comments */:\n            break\n          case 8:\n            return 15\n            break\n          case 9:\n            return 5\n            break\n        }\n      },\n      rules: [\n        /^(?:\\()/,\n        /^(?:\\))/,\n        /^(?:\\\\|Î»)/,\n        /^(?:\\.)/,\n        /^(?:=)/,\n        /^(?:\\n)/,\n        /^(?:[^\\S\\n]+)/,\n        /^(?:;.*)/,\n        /^(?:[^\\s\\(\\)\\\\Î»\\.=]+)/,\n        /^(?:$)/\n      ],\n      conditions: {\n        INITIAL: { rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], inclusive: true }\n      }\n    }\n    return lexer\n  })()\n  parser.lexer = lexer\n  function Parser() {\n    this.yy = {}\n  }\n  Parser.prototype = parser\n  parser.Parser = Parser\n  return new Parser()\n})()\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = grammar\n  exports.Parser = grammar.Parser\n  exports.parse = function() {\n    return grammar.parse.apply(grammar, arguments)\n  }\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE')\n      process.exit(1)\n    }\n    var source = require('fs').readFileSync(\n      require('path').normalize(args[1]),\n      'utf8'\n    )\n    return exports.parser.parse(source)\n  }\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1))\n  }\n}\n","import { App, Def, Fun, Term } from './terms'\n\nexport type Callback = (t: Term) => void\n\n// Compose a callback function with a term constructor.\nexport const composeFun = (fn: Callback, x: string) => (b: Term) =>\n  fn(Fun(x, b))\nexport const composeAppL = (fn: Callback, l: Term) => (r: Term) => fn(App(l, r))\nexport const composeAppR = (fn: Callback, r: Term) => (l: Term) => fn(App(l, r))\n\nexport type Definitions = { [key: string]: Term }\n\n// Represents a reduction \"step\" as displayed on the application.\nexport type Step =\n  | { type: 'alpha'; before: Fun; after: Fun }\n  | { type: 'beta'; before: App; after: Term }\n  | { type: 'eta'; before: Fun; after: Term }\n  | { type: 'def'; before: Def; after: Term }\n\nexport type AnnotatedTerm = Term & { step: Step }\n\n// Mark a reduction step on the `after` term.\nexport const markStep = (step: Step): AnnotatedTerm => ({ ...step.after, step })\n","export * from './terms'\nexport { default as parse } from './parse'\nexport { default as format } from './format'\nexport { reduceProgram, Reduction, Options } from './reduce-program'\nexport { Definitions } from './helpers'\n","import { collapseWhitespace, timed } from '../utils'\nimport { Parser } from './grammar'\nimport { Definitions } from './helpers'\nimport { App, Fun, Term } from './terms'\n\n// Parses an input program string and returns an object with the top-level terms\n// and definitions of the program.\nconst parse = timed('parse', (str: string) => {\n  // A custom Jison parser.\n  const parser = new Parser()\n\n  // A definition table with the definition term by their names.\n  const defs: Definitions = {}\n  // The terms of the program.\n  const terms: Term[] = []\n\n  // Add some handy functions so the parser can build the AST.\n  parser.yy = {\n    parseFunction: Fun,\n    parseApplication: App,\n    parseDefinition: (name: string, term: Term) => {\n      if (defs[name]) {\n        throw Error(`${name} already defined`)\n      }\n      defs[name] = term\n    },\n    parseTopLevelTerm: (term: Term) => {\n      terms.push(term)\n    },\n    parseIdentifier: (name: string) => ({ type: 'ref', name })\n  }\n\n  parser.parse(str)\n\n  terms.forEach(t => resolveTermRefs(t, defs))\n\n  const refNames = {}\n  Object.keys(defs).forEach(name => {\n    resolveDefRefs(name, defs[name], defs, refNames)\n  })\n\n  return { defs, terms }\n})\n\nexport default parse\n\n// Temporary term used only while parsing as a placeholder for wither a Var o a\n// Ref. On the first pass the parser cannot know if an identifier is a variable\n// or a definition (because definitions can be declared after their use), so it\n// stores a Ref instead and then on a second pass decides what it should be and\n// *mutates* the Ref in-place to become either a Var or a Ref.\n// TODO: Remove this hack.\ntype TermOrRef = Term | { type: 'ref'; name: string }\n\n// Changes all Refs inside term t to either Vars or Defs.\nconst resolveTermRefs = (\n  t: TermOrRef,\n  defs: Definitions,\n  boundNames: string[] = []\n) => {\n  switch (t.type) {\n    case 'ref':\n      const free = boundNames.indexOf(t.name) < 0\n      if (t.name in defs && free) {\n        Object.assign(t, { type: 'def', term: defs[t.name] })\n      } else {\n        Object.assign(t, { type: 'var' })\n      }\n      break\n    case 'app':\n      resolveTermRefs(t.left, defs, boundNames)\n      resolveTermRefs(t.right, defs, boundNames)\n      break\n    case 'fun':\n      resolveTermRefs(t.body, defs, boundNames.concat(t.param))\n      break\n  }\n}\n\ntype RefNames = { [key: string]: string[] }\n\n// Changes all Refs inside term t to either Vars or Defs.\nconst resolveDefRefs = (\n  defName: string,\n  t: TermOrRef,\n  defs: Definitions,\n  refNames: RefNames,\n  boundNames: string[] = []\n) => {\n  switch (t.type) {\n    case 'ref':\n      const bound = boundNames.indexOf(t.name) >= 0\n      if (bound) {\n        Object.assign(t, { type: 'var' })\n      } else if (t.name in defs) {\n        refNames[defName] = [...(refNames[defName] || []), t.name]\n        checkForCircularRefs(defName, t.name, refNames)\n        Object.assign(t, { type: 'def', term: defs[t.name] })\n      } else {\n        throw Error(\n          collapseWhitespace(\n            `Illegal free variable \"${t.name}\" in \"${defName}\". \n        Definitions cannot have free variables.`\n          )\n        )\n      }\n      break\n    case 'app':\n      resolveDefRefs(defName, t.left, defs, refNames, boundNames)\n      resolveDefRefs(defName, t.right, defs, refNames, boundNames)\n      break\n    case 'fun':\n      const boundOnBody = boundNames.concat(t.param)\n      resolveDefRefs(defName, t.body, defs, refNames, boundOnBody)\n      break\n  }\n}\n\nconst checkForCircularRefs = (\n  name: string,\n  refName: string,\n  refNames: RefNames,\n  path: string[] = []\n) => {\n  if (name === refName) {\n    const circularNote = path.length\n      ? `In this case the definition does not reference itself directly, but \n        through other definitions: ${[name, ...path, name].join(' â ')}.`\n      : ''\n    throw Error(\n      collapseWhitespace(\n        `Illegal recursive reference in \"${name}\". Definitions cannot\n      reference themselves; they are just simple find&replace mechanisms.\n      ${circularNote}\n      If you want to write a recursive function, look for \"Y combinator\" ;)`\n      )\n    )\n  }\n\n  const nextRefs = refNames[refName] || []\n  nextRefs.forEach(nextRef =>\n    checkForCircularRefs(name, nextRef, refNames, [...path, refName])\n  )\n}\n","import { identity, timed } from '../utils'\nimport alphaEq from './alpha-eq'\nimport format from './format'\nimport { AnnotatedTerm, Definitions, Step } from './helpers'\nimport parse from './parse'\nimport reduce, { Options as ReduceOptions } from './reduce'\nimport { substitute } from './substitute'\nimport { App, Fun, Term, Var } from './terms'\n\nexport type Options = Partial<ReduceOptions> & {\n  maxReductionSteps?: number\n}\n\nexport type Reduction = {\n  initial: string\n  final: string\n  finalSynonyms: string[]\n  terminates: boolean\n  reductionSteps: number\n  totalSteps: number\n  renderStep: (i: number, options: RenderStepOptions) => RenderedStep\n}\n\ntype RenderStepOptions = {\n  highlightFormerTerm?: StrFun\n  highlightSubstitutionTerm?: StrFun\n  highlightStep?: StrFun\n}\n\ntype StrFun = (s: string) => string\n\ntype RenderedStep = {\n  type: 'alpha' | 'beta' | 'eta' | 'def'\n  before: string\n  after: string\n}\n\n// Reduce a program and return with the reduction for each term in the program.\nexport const reduceProgram = (program: string, options: Options = {}) => {\n  const { terms, defs } = parse(program)\n  return terms.map(term => reduceTerm(term, defs, options))\n}\n\n// Reduces a term up to its normal form.\nlet reduceTerm = (\n  term: Term,\n  defs: Definitions,\n  { maxReductionSteps = 100, strategy = 'normal', etaEnabled = false }: Options\n): Reduction => {\n  const enough = {}\n  const steps: Term[] = []\n  let reductionSteps = 0\n  let terminates = false\n  try {\n    reduce(term, { strategy, etaEnabled }, stepTerm => {\n      if (reductionSteps >= maxReductionSteps) {\n        throw enough\n      }\n      steps.push(stepTerm)\n\n      // TODO: it'd be nice if we didn't need to find the step type on the term\n      // on each step. Maybe the callback function could receive the step type\n      // as an argument.\n      const step = findStep(stepTerm)\n      if (!step) {\n        throw new Error('Unexpected: term should always have a step')\n      }\n      if (step.type === 'beta' || step.type === 'eta') {\n        reductionSteps += 1\n      }\n    })\n    terminates = true\n  } catch (e) {\n    if (e !== enough) {\n      throw e\n    }\n    terminates = false\n  }\n\n  const last = steps[steps.length - 1] || term\n  return {\n    initial: format(term),\n    final: format(last),\n    finalSynonyms: findSynonyms(last, defs),\n    terminates,\n    reductionSteps,\n    totalSteps: steps.length,\n    renderStep: (i, options) => expandStep(steps[i], options)\n  }\n}\nreduceTerm = timed('reduce', reduceTerm)\n\nconst expandStep = (t: Term, options: RenderStepOptions = {}) => {\n  const step = findStep(t)\n  if (!step) {\n    throw new Error('Unexpected: term should always have a step')\n  }\n\n  let before: Term = step.before\n  let after: Term = step.after\n\n  const {\n    highlightFormerTerm = identity,\n    highlightSubstitutionTerm = identity,\n    highlightStep = identity\n  } = options\n\n  switch (step.type) {\n    case 'alpha':\n      before = highlightFunctionVar(\n        step.before.body,\n        step.before.param,\n        highlightFormerTerm\n      )\n      after = highlightFunctionVar(\n        step.after.body,\n        step.after.param,\n        highlightSubstitutionTerm\n      )\n      break\n    case 'beta':\n      const fun = step.before.left as Fun\n      const hs = highlight(step.before.right, highlightSubstitutionTerm)\n      const ha = highlightFunctionVar(fun.body, fun.param, highlightFormerTerm)\n      before = App(ha, hs)\n      after = substitute(fun.body, fun.param, hs)\n      break\n    case 'eta':\n    case 'def':\n      before = highlight(step.before, highlightFormerTerm)\n      after = highlight(step.after, highlightSubstitutionTerm)\n      break\n  }\n\n  before = highlight(before, highlightStep)\n  after = highlight(after, highlightStep)\n\n  const beforeStr = format(replaceStep(t, before))\n  const afterStr = format(replaceStep(t, after))\n\n  return { type: step.type, before: beforeStr, after: afterStr }\n}\n\nconst highlight = (t: Term, fn: StrFun) => {\n  const h: StrFun = (t as any).highlight\n  const highlight: StrFun = h ? s => fn(h(s)) : fn\n  return { ...t, highlight }\n}\n\nconst highlightFunctionVar = (t: Term, x: string, fn: StrFun) => {\n  const hx = highlight(Var(x), fn)\n  const ht = substitute(t, x, hx)\n  return { ...Fun(x, ht), highlightVar: fn }\n}\n\nconst findStep = (t: Term | AnnotatedTerm): Step | undefined => {\n  if ('step' in t) {\n    return t.step\n  }\n\n  switch (t.type) {\n    case 'fun':\n      return findStep(t.body)\n    case 'app':\n      return findStep(t.left) || findStep(t.right)\n  }\n}\n\nconst replaceStep = (t: Term | AnnotatedTerm, replacement: Term): Term => {\n  if ('step' in t && t.step) {\n    return replacement\n  }\n\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return t\n    case 'fun':\n      const body = replaceStep(t.body, replacement)\n      return t.body === body ? t : Fun(t.param, body)\n    case 'app':\n      const l = replaceStep(t.left, replacement)\n      if (t.left !== l) {\n        return App(l, t.right)\n      }\n      const r = replaceStep(t.right, replacement)\n      return t.right === r ? t : App(l, r)\n  }\n}\n\nconst findSynonyms = (term: Term, defs: Definitions) => {\n  const synonyms = []\n  for (const name in defs) {\n    if (alphaEq(term, defs[name])) {\n      synonyms.push(name)\n    }\n  }\n  return synonyms\n}\n","import freeIn from './free-in'\nimport {\n  Callback,\n  composeAppL,\n  composeAppR,\n  composeFun,\n  markStep\n} from './helpers'\nimport { applySubstitution, renameForSubstitution } from './substitute'\nimport { App, Fun, Term } from './terms'\n\nexport type Options = {\n  strategy: keyof typeof reduceFunctions\n  etaEnabled: boolean\n}\n\nconst reduce = (t: Term, { strategy, etaEnabled }: Options, cb: Callback) => {\n  const reducer = reduceFunctions[strategy]\n  let reduced = reducer(t, cb)\n  if (etaEnabled) {\n    reduced = reduceEta(reduced, cb)\n  }\n  return reduced\n}\n\nexport default reduce\n\ntype Reducer = (t: Term, cb: Callback) => Term\n\nconst reduceCallByName: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n    case 'fun':\n      return t\n    case 'app':\n      const l = reduceCallByName(t.left, composeAppR(cb, t.right))\n      return l.type === 'fun'\n        ? reduceCallByName(apply(l, t.right, cb), cb)\n        : App(l, t.right)\n    case 'def':\n      cb(markStep({ type: 'def', before: t, after: t.term }))\n      return reduceCallByName(t.term, cb)\n  }\n}\n\nconst reduceNormal: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      return Fun(t.param, reduceNormal(t.body, composeFun(cb, t.param)))\n    case 'app':\n      let l = reduceCallByName(t.left, composeAppR(cb, t.right))\n      if (l.type === 'fun') {\n        return reduceNormal(apply(l, t.right, cb), cb)\n      } else {\n        l = reduceNormal(l, composeAppR(cb, t.right)) // Finish reducing l.\n        const r = reduceNormal(t.right, composeAppL(cb, l))\n        return App(l, r)\n      }\n    case 'def':\n      cb(markStep({ type: 'def', before: t, after: t.term }))\n      return reduceNormal(t.term, cb)\n  }\n}\n\nconst reduceCallByValue: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n    case 'fun':\n      return t\n    case 'app':\n      const l = reduceCallByValue(t.left, composeAppR(cb, t.right))\n      const r = reduceCallByValue(t.right, composeAppL(cb, l))\n      return l.type === 'fun'\n        ? reduceCallByValue(apply(l, r, cb), cb)\n        : App(l, r)\n    case 'def':\n      cb(markStep({ type: 'def', before: t, after: t.term }))\n      return reduceCallByValue(t.term, cb)\n  }\n}\n\nconst reduceApplicative: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      return Fun(t.param, reduceApplicative(t.body, composeFun(cb, t.param)))\n    case 'app':\n      let l = reduceCallByValue(t.left, composeAppR(cb, t.right))\n      if (l.type === 'fun') {\n        const r = reduceCallByValue(t.right, composeAppL(cb, l))\n        return reduceApplicative(apply(l, r, cb), cb)\n      } else {\n        l = reduceApplicative(l, composeAppR(cb, t.right))\n        const r = reduceApplicative(t.right, composeAppL(cb, l))\n        return App(l, r)\n      }\n    case 'def':\n      cb(markStep({ type: 'def', before: t, after: t.term }))\n      return reduceApplicative(t.term, cb)\n  }\n}\n\nconst apply = (fun: Fun, subst: Term, cb: Callback) => {\n  const renameCb = composeFun(composeAppR(cb, subst), fun.param)\n  const renamedBody = renameForSubstitution(\n    fun.body,\n    fun.param,\n    subst,\n    renameCb\n  )\n  const renamed = App(Fun(fun.param, renamedBody), subst)\n  const applied = applySubstitution(renamedBody, fun.param, subst)\n  cb(markStep({ type: 'beta', before: renamed, after: applied }))\n  return applied\n}\n\n// Performs any available Î·-reductions on a term.\nconst reduceEta: Reducer = (t, cb) => {\n  switch (t.type) {\n    case 'var':\n      return t\n    case 'fun':\n      // Î»x.(F x) = F if x is free in F\n      if (\n        t.body.type === 'app' &&\n        t.body.right.type === 'var' &&\n        t.body.right.name === t.param &&\n        !freeIn(t.param, t.body.left)\n      ) {\n        cb(markStep({ type: 'eta', before: t, after: t.body.left }))\n        return t.body.left\n      } else {\n        return Fun(t.param, reduceEta(t.body, composeFun(cb, t.param)))\n      }\n    case 'app':\n      const l = reduceEta(t.left, composeAppR(cb, t.right))\n      const r = reduceEta(t.right, composeAppR(cb, l))\n      return App(l, r)\n    case 'def':\n      return t\n  }\n}\n\nconst reduceFunctions = {\n  normal: reduceNormal,\n  applicative: reduceApplicative,\n  cbn: reduceCallByName,\n  cbv: reduceCallByValue\n}\n","import freeIn from './free-in'\nimport {\n  Callback,\n  composeAppL,\n  composeAppR,\n  composeFun,\n  markStep\n} from './helpers'\nimport { App, Fun, Term, Var } from './terms'\n\n// Applies the substitution T[x := S]\n// I.e., substitutes the variable x for the term S in the term T.\nexport const substitute = (t: Term, x: string, s: Term): Term => {\n  switch (t.type) {\n    case 'var':\n      // x[x := S] = S\n      // y[x := S] = y\n      return t.name === x ? s : t\n    case 'fun':\n      // (Î»x.E)[x := S] = Î»x.E\n      // Î»x creates a new context for x so no further substitution is needed.\n      if (t.param === x) {\n        return t\n      }\n      // (Î»y.E)[x := S] with x != y\n      // If y is free in S and x is free in E, then must Î±-convert Î»y.E to avoid\n      // name conflicts.\n      if (freeIn(t.param, s) && freeIn(x, t.body)) {\n        // (Î»y.E)[x := S] = Î»y'.(E[y := y'][x := S])\n        const newVarName = renameVar(t.param, t.body, s)\n        const renamedBody = applySubstitution(t.body, t.param, Var(newVarName))\n        return Fun(newVarName, substitute(renamedBody, x, s))\n      } else {\n        // (Î»y.E)[x := S] = Î»y.(E[x := S])\n        return Fun(t.param, substitute(t.body, x, s))\n      }\n    case 'app':\n      // (U V)[x := S] = (U[x := S]) (V[x := S])\n      return App(substitute(t.left, x, s), substitute(t.right, x, s))\n    case 'def':\n      return t\n  }\n}\n\n// Note: renameForSubstitution() and applySubstitution() are the same as\n// substitute(), only split up into two different steps. We need them that way\n// to be able to do all alpha-renaming steps before each beta-reduction, but it\n// would be nice to have these three functions DRY up a bit.\n\n// Performs the Î±-conversions necessary for the substitution T[x := S], but does\n// not perform the substitution itself.\n// Records the Î±-conversions by calling cb.\nexport const renameForSubstitution = (\n  t: Term,\n  x: string,\n  s: Term,\n  cb: Callback\n): Term => {\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return t\n    case 'fun':\n      if (t.param === x) {\n        return t\n      }\n      if (freeIn(t.param, s) && freeIn(x, t.body)) {\n        const newVarName = renameVar(t.param, t.body, s)\n        const renamedBody = applySubstitution(t.body, t.param, Var(newVarName))\n        cb(\n          markStep({\n            type: 'alpha',\n            before: t,\n            after: (t = Fun(newVarName, renamedBody))\n          })\n        )\n      }\n      const body = renameForSubstitution(t.body, x, s, composeFun(cb, t.param))\n      return Fun(t.param, body)\n    case 'app':\n      const l = renameForSubstitution(t.left, x, s, composeAppR(cb, t.right))\n      const r = renameForSubstitution(t.right, x, s, composeAppL(cb, l))\n      return App(l, r)\n  }\n}\n\n// Applies the substitution T[x := S] directly, without doing Î±-conversions.\nexport const applySubstitution = (t: Term, x: string, s: Term): Term => {\n  switch (t.type) {\n    case 'var':\n      return t.name === x ? s : t\n    case 'fun':\n      return t.param === x ? t : Fun(t.param, applySubstitution(t.body, x, s))\n    case 'app':\n      const l = applySubstitution(t.left, x, s)\n      const r = applySubstitution(t.right, x, s)\n      return App(l, r)\n    case 'def':\n      return t\n  }\n}\n\n// Renames a variable to avoid naming conflicts case doing: a substitution.\nconst renameVar = (oldName: string, t: Term, s: Term) => {\n  // Split the name into base and number part.\n  const base = oldName.replace(/\\d+$/, '')\n  const match = oldName.match(/\\d+$/)\n  let n = match ? parseInt(match[0], 10) : 0\n\n  while (true) {\n    n++\n    const newName = base + n\n    const isValid =\n      // Avoid name collisions with substitution term.\n      !freeIn(newName, s) &&\n      // Avoid name collisions with free variables in body.\n      !freeIn(newName, t) &&\n      // Avoid name collisions with inner functions.\n      !varRenameCollides(t, oldName, newName)\n\n    if (isValid) {\n      return newName\n    }\n  }\n}\n\n// Whether a variable rename collides in a given term. That is, if changing the\n// occurrences of oldName with newName in t would make it change t's meaning\n// (i.e. not be Î±-equivalent).\nconst varRenameCollides = (\n  t: Term,\n  oldName: string,\n  newName: string\n): boolean => {\n  switch (t.type) {\n    case 'var':\n    case 'def':\n      return false\n    case 'fun':\n      // A variable rename collides with this function if the old variable\n      // was free in the function and the new name for the variable is the\n      // same as the param of the function, thus changing old free variable\n      // binding.\n      return (\n        (t.param === newName && freeIn(oldName, t)) ||\n        // Or if the renaming collides in the body of the function.\n        varRenameCollides(t.body, oldName, newName)\n      )\n    case 'app':\n      return (\n        varRenameCollides(t.left, oldName, newName) ||\n        varRenameCollides(t.right, oldName, newName)\n      )\n  }\n}\n","type Var = { type: 'var'; name: string }\ntype Fun = { type: 'fun'; param: string; body: Term }\ntype App = { type: 'app'; left: Term; right: Term }\ntype Def = { type: 'def'; name: string; term: Term }\ntype Term = Var | Fun | App | Def\n\n// Term constructors.\nconst Var = (name: string): Var => ({ type: 'var', name })\nconst Fun = (param: string, body: Term): Fun => ({ type: 'fun', param, body })\nconst App = (left: Term, right: Term): App => ({ type: 'app', left, right })\nconst Def = (name: string, term: Term): Def => ({ type: 'def', name, term })\n\nexport { Term, Var, Fun, App, Def }\n","let logTimings = false\n\nexport const timed = <TS extends any[], R>(\n  name: string,\n  fn: (...args: TS) => R\n) => (...args: TS) => {\n  if (logTimings) {\n    console.time(name)\n  }\n  const res = fn(...args)\n  if (logTimings) {\n    console.timeEnd(name)\n  }\n  return res\n}\n\nexport const enableLogTimings = () => {\n  logTimings = true\n}\nexport const disableLogTimings = () => {\n  logTimings = false\n}\n\nexport const identity = <T>(x: T) => x\n\n// Note: it would be nice to replace this overly-clever function with\n// String.dedent() once it gets standardized. See https://github.com/tc39/proposal-string-dedent\nexport const dedent = (str: string) => {\n  const match = str.match(/^[ \\t]*(?=\\S)/gm)\n  if (!match) {\n    return str\n  }\n\n  const indent = Math.min(...match.map(x => x.length))\n  const re = new RegExp(`^[ \\\\t]{${indent}}`, 'gm')\n  const unindented = indent > 0 ? str.replace(re, '') : str\n\n  return unindented.trim()\n}\n\nexport const collapseWhitespace = (str: string) => str.replace(/\\s+/gm, ' ')\n"]}